{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/frost-list-test.js","dummy/tests/factories/list-item.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-frost-core.js","dummy/tests/helpers/ember-frost-core/frost-button.js","dummy/tests/helpers/ember-frost-core/frost-select.js","dummy/tests/helpers/ember-frost-core/frost-text.js","dummy/tests/helpers/ember-frost-core/utils.js","dummy/tests/helpers/ember-prop-types.js","dummy/tests/helpers/ember-test-utils/describe-component.js","dummy/tests/helpers/ember-test-utils/describe-model.js","dummy/tests/helpers/ember-test-utils/describe-module.js","dummy/tests/helpers/ember-test-utils/ember-data.js","dummy/tests/helpers/ember-test-utils/ember-intl.js","dummy/tests/helpers/ember-test-utils/index.js","dummy/tests/helpers/ember-test-utils/object-diff.js","dummy/tests/helpers/ember-test-utils/setup-component-test.js","dummy/tests/helpers/ember-test-utils/setup-test.js","dummy/tests/helpers/ember-test-utils/typedefs.js","dummy/tests/helpers/mock-component.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/frost-list-content-container-test.js","dummy/tests/integration/components/frost-list-core-test.js","dummy/tests/integration/components/frost-list-expansion-test.js","dummy/tests/integration/components/frost-list-item-expansion-test.js","dummy/tests/integration/components/frost-list-item-selection-test.js","dummy/tests/integration/components/frost-list-item-test.js","dummy/tests/integration/components/frost-list-pagination-test.js","dummy/tests/integration/components/frost-list-selection-indicator-test.js","dummy/tests/integration/components/frost-list-test.js","dummy/tests/test-helper.js","dummy/tests/unit/components/frost-list-core-test.js","dummy/tests/unit/components/frost-list-expansion-test.js","dummy/tests/unit/components/frost-list-item-test.js","dummy/tests/unit/components/frost-list-selection-indicator-test.js","dummy/tests/unit/components/frost-list-test.js","dummy/tests/unit/components/frost-pagination-test.js","dummy/tests/unit/helpers/floor-test.js","dummy/tests/unit/helpers/is-lead-selection.js","dummy/tests/unit/mixins/frost-list-core-mixin-test.js","dummy/tests/unit/mixins/frost-list-expansion-mixin-test.js","dummy/tests/unit/mixins/frost-list-mixin-test.js","dummy/tests/unit/mixins/frost-list-selection-mixin-test.js","dummy/tests/unit/mixins/frost-list-sorting-mixin-test.js","dummy/tests/unit/utils/selection-test.js","dummy/tests/unit/utils/utils-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/frost-list-test', ['exports', 'chai', 'ember-data-factory-guy', 'ember-hook', 'mocha', 'dummy/tests/helpers/destroy-app', 'dummy/tests/helpers/start-app'], function (exports, _chai, _emberDataFactoryGuy, _emberHook, _mocha, _dummyTestsHelpersDestroyApp, _dummyTestsHelpersStartApp) {\n\n  _mocha.describe.skip('Acceptance: FrostList', function () {\n    var application = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      application = (0, _dummyTestsHelpersStartApp['default'])();\n      // Adding FactoryGuy mockSetup call\n      (0, _emberDataFactoryGuy.mockSetup)();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      (0, _dummyTestsHelpersDestroyApp['default'])(application);\n      // Adding FactoryGuy mockTeardown call\n      (0, _emberDataFactoryGuy.mockTeardown)();\n    });\n\n    (0, _mocha.it)('can expand and collapse rows', function () {\n      var queryBinding = (0, _emberDataFactoryGuy.buildList)('list-item', 20);\n      (0, _emberDataFactoryGuy.mockQuery)('list-item', { pageSize: 20, start: 0 }).returns({ json: queryBinding });\n\n      visit('/qp-binding');\n\n      andThen(function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('-item-0').hasClass('is-expanded')).to.eql(false);\n      });\n\n      click((0, _emberHook.hook)('-expand-all'));\n\n      andThen(function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('-item-0').hasClass('is-expanded')).to.eql(true);\n      });\n\n      click((0, _emberHook.hook)('-collapse-all'));\n\n      andThen(function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('-item-0').hasClass('is-expanded')).to.eql(false);\n      });\n    });\n  });\n});","define('dummy/tests/factories/list-item', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('list-item', {\n    sequences: {\n      label: function label(num) {\n        var items = ['foo', 'bar', 'biz', 'baz'];\n        return items[num % items.length];\n      }\n    },\n\n    'default': {\n      label: _emberDataFactoryGuy['default'].generate('label')\n    }\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n  var run = _ember['default'].run;\n\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/ember-frost-core', ['exports', 'ember', 'ember-hook', 'dummy/tests/helpers/ember-frost-core/frost-button', 'dummy/tests/helpers/ember-frost-core/frost-select', 'dummy/tests/helpers/ember-frost-core/frost-text'], function (exports, _ember, _emberHook, _dummyTestsHelpersEmberFrostCoreFrostButton, _dummyTestsHelpersEmberFrostCoreFrostSelect, _dummyTestsHelpersEmberFrostCoreFrostText) {\n  exports.click = click;\n  exports.fillIn = fillIn;\n  exports.focusout = focusout;\n  var $ = _ember['default'].$;\n  var typeOf = _ember['default'].typeOf;\n  // eslint-disable-line\n\n  var assign = Object.assign || _ember['default'].assign || _ember['default'].merge; // eslint-disable-line\n\n  /**\n   * Click on element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   */\n\n  function click(element) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.click();\n  }\n\n  /**\n   * Fill in an element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   * @param {String} value - value to fill in\n   */\n\n  function fillIn(element, value) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.val(value).trigger('input');\n  }\n\n  /**\n   * Remove focus from element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   */\n\n  function focusout(element) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.focusout();\n  }\n\n  // TODO: Remove these as part of next major release, expecting consumers to\n  // import {expectWithState} from 'dummy/tests/helpers/ember-frost-core/frost-select'\n  // instead so we don't have to manange this import/re-export madness.\n  var expectButtonWithState = _dummyTestsHelpersEmberFrostCoreFrostButton.expectWithState;\n  exports.expectButtonWithState = expectButtonWithState;\n  var expectSelectWithState = _dummyTestsHelpersEmberFrostCoreFrostSelect.expectWithState;\n  exports.expectSelectWithState = expectSelectWithState;\n  var expectTextInputWithState = _dummyTestsHelpersEmberFrostCoreFrostText.expectWithState;\n  exports.expectTextInputWithState = expectTextInputWithState;\n  var filterSelect = _dummyTestsHelpersEmberFrostCoreFrostSelect.filter;\n  exports.filterSelect = filterSelect;\n  var findButtons = _dummyTestsHelpersEmberFrostCoreFrostButton.find;\n  exports.findButtons = findButtons;\n  var findTextInputs = _dummyTestsHelpersEmberFrostCoreFrostText.find;\n\n  exports.findTextInputs = findTextInputs;\n  exports['default'] = {\n    click: click,\n    expectButtonWithState: expectButtonWithState,\n    expectSelectWithState: expectSelectWithState,\n    expectTextInputWithState: expectTextInputWithState,\n    fillIn: fillIn,\n    findButtons: findButtons,\n    findTextInputs: findTextInputs,\n    focusout: focusout\n  };\n});","define('dummy/tests/helpers/ember-frost-core/frost-button', ['exports', 'chai', 'ember', 'ember-hook', 'dummy/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _ember, _emberHook, _dummyTestsHelpersEmberFrostCoreUtils) {\n  exports.expectWithState = expectWithState;\n  exports.find = find;\n  var $ = _ember['default'].$;\n  var typeOf = _ember['default'].typeOf;\n  // eslint-disable-line\n\n  var assign = Object.assign || _ember['default'].assign || _ember['default'].merge; // eslint-disable-line\n\n  /**\n   * Verify button exists with expected state\n   * @param {jQuery|String} button - name of Ember hook or jQuery instance\n   * @param {FrostButtonState} state - expected button state\n   */\n\n  function expectWithState(button, state) {\n    var defaults = {\n      disabled: false,\n      pack: 'frost'\n    };\n\n    var $button = typeOf(button) === 'string' ? (0, _emberHook.$hook)(button) : button;\n    state = assign(defaults, state);\n\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectDisabledState)($button, state.disabled, 'button');\n\n    if (state.icon && state.pack) {\n      (0, _chai.expect)($button.find('.frost-icon-' + state.pack + '-' + state.icon), 'button has expected icon').to.have.length(1);\n    }\n\n    if (state.text) {\n      (0, _chai.expect)($button.find('.text:not(.icon-text)').text().trim(), 'button has expected text').to.equal(state.text);\n    }\n  }\n\n  /**\n   * Get list of buttons\n   * @returns {jQuery} buttons\n   */\n\n  function find() {\n    return $('.frost-button');\n  }\n});\n/**\n * @typedef {Object} FrostButtonState\n * @property {Boolean} [disabled=false] - whether or not button is disabled\n * @property {String} [icon] - name of button icon\n * @property {String} [pack=\"frost\"] - name of icon pack for button's icon\n * @property {String} [text] - button text\n */","define('dummy/tests/helpers/ember-frost-core/frost-select', ['exports', 'chai', 'ember', 'ember-hook', 'ember-test-helpers/wait', 'dummy/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _ember, _emberHook, _emberTestHelpersWait, _dummyTestsHelpersEmberFrostCoreUtils) {\n  exports.expectWithState = expectWithState;\n  exports.filter = filter;\n  exports.open = open;\n  exports.close = close;\n  exports.selectItemAtIndex = selectItemAtIndex;\n  var $ = _ember['default'].$;\n  var RSVP = _ember['default'].RSVP;\n  var run = _ember['default'].run;\n  var typeOf = _ember['default'].typeOf;\n  // eslint-disable-line\n\n  var assign = Object.assign || _ember['default'].assign || _ember['default'].merge; // eslint-disable-line\n\n  /* eslint-disable complexity */\n  /**\n   * Verify select exists with expected state\n   * @param {jQuery|String} select - name of Ember hook or jQuery instance\n   * @param {FrostSelectState} state - expected select state\n   */\n\n  function expectWithState(select, state) {\n    var defaults = {\n      disabled: false,\n      error: false,\n      opened: false,\n      tabIndex: 0,\n      text: ''\n    };\n\n    var $select = typeOf(select) === 'string' ? (0, _emberHook.$hook)(select) : select;\n    state = assign(defaults, state);\n\n    (0, _chai.expect)($select.hasClass('frost-select'), 'has frost-select class').to.equal(true);\n\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectToggleClass)($select, 'frost-select-disabled', state.disabled);\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectToggleClass)($select, 'frost-select-error', state.error);\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectToggleClass)($select, 'frost-select-focused', state.focused);\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectToggleClass)($select, 'frost-select-opened', state.opened);\n\n    (0, _chai.expect)($select.prop('tabindex'), 'has expected tab index').to.equal(state.disabled ? -1 : state.tabIndex);\n\n    if (state.focusedItem) {\n      (0, _chai.expect)($('.frost-select-list-item-focused .frost-select-list-item-text').data('text'), 'is focused on expected item').to.equal(state.focusedItem);\n    }\n\n    var $emptyMessage = $('.frost-select-dropdown-empty-msg');\n\n    if (state.items && state.items.length !== 0) {\n      var labels = $('.frost-select-dropdown li').toArray().map(function (element) {\n        return $(element).find('.frost-select-list-item-text').data('text');\n      });\n\n      (0, _chai.expect)(labels, 'has expected items').to.eql(state.items);\n      (0, _chai.expect)($emptyMessage, 'does not show empty message').to.have.length(0);\n    } else if (state.opened) {\n      (0, _chai.expect)($emptyMessage, 'shows empty message').to.have.length(1);\n    }\n\n    (0, _chai.expect)($select.find('.frost-select-text').text().trim(), 'has expected text').to.equal(state.text);\n  }\n\n  /* eslint-disable complexity */\n\n  /**\n   * Filter frost-select\n   * @param {String} filter - filter to apply to select\n   */\n\n  function filter(filter) {\n    $(window).trigger('resize'); // For some reason we need to do this in Ember 2.3\n    $('.frost-select-dropdown .frost-text-input').val(filter).trigger('input');\n  }\n\n  /**\n   * Open frost-select dropdown\n   * @param {String} [hook='select'] - frost-select hook\n   * @returns {Promise} the resolved promise from ember-test-helpers/wait\n   */\n\n  function open() {\n    var hook = arguments.length <= 0 || arguments[0] === undefined ? 'select' : arguments[0];\n\n    // In a real browser when you click on the select with your mouse a\n    // focusin event is fired on the component. However when using jQuery's\n    // click() method the focusin is not fired so we are programitcally\n    // triggering that in this test.\n    (0, _emberHook.$hook)(hook).click().trigger('focusin');\n    return (0, _emberTestHelpersWait['default'])();\n  }\n\n  /**\n   * Close frost-select dropdown\n   * @param {String} [hook='select'] - frost-select hook\n   * @returns {Promise} the resolved promise from ember-test-helpers/wait\n   */\n\n  function close() {\n    var hook = arguments.length <= 0 || arguments[0] === undefined ? 'select' : arguments[0];\n\n    (0, _emberHook.$hook)(hook).click().trigger('focusout');\n    return (0, _emberTestHelpersWait['default'])();\n  }\n\n  /**\n   * Select item in select dropdown at given index\n   * NOTE: using done() instead of Promise based because promised based causes\n   * select to lose focus for some reason. This may have something to with with\n   * how mocha is handling done vs promise returns.\n   * @param {String} hook - frost-select hook\n   * @param {Number} index - index of item to select\n   * @param {Function} done - mocha done callback\n   */\n\n  function selectItemAtIndex(hook, index, done) {\n    (0, _emberHook.$hook)(hook + '-item', { index: index }).trigger('mousedown');\n    run.next(function () {\n      done();\n    });\n  }\n});\n/**\n * @typedef {Object} FrostSelectState\n * @property {Boolean} [disabled=false] - whether or not select is disabled\n * @property {Boolean} [error=false] - whether or not select has error\n * @property {Boolean} [focused] - whether or not select is focused\n * @property {String} [focusedItem] - label of focused item\n * @property {String} [items] - list of item labels present in dropdown\n * @property {Boolean} [opened=false] - whether or not select is opened\n * @property {Number} [tabIndex=0] - tab index of root element\n * @property {String} [text=''] - text in select for describing what is selected\n */","define('dummy/tests/helpers/ember-frost-core/frost-text', ['exports', 'chai', 'ember', 'ember-hook', 'dummy/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _ember, _emberHook, _dummyTestsHelpersEmberFrostCoreUtils) {\n  exports.expectWithState = expectWithState;\n  exports.find = find;\n  var $ = _ember['default'].$;\n  var typeOf = _ember['default'].typeOf;\n  // eslint-disable-line\n\n  var assign = Object.assign || _ember['default'].assign || _ember['default'].merge; // eslint-disable-line\n\n  /**\n   * Verify text input exists with expected state\n   * @param {jQuery|String} input - name of Ember hook or jQuery instance\n   * @param {FrostTextState} state - expected input state\n   */\n\n  function expectWithState(input, state) {\n    var defaults = {\n      align: 'left',\n      disabled: false,\n      error: false,\n      tabIndex: 0,\n      type: 'text'\n    };\n\n    var $input = typeOf(input) === 'string' ? (0, _emberHook.$hook)(input) : input;\n    state = assign(defaults, state);\n\n    (0, _chai.expect)($input.hasClass(state.align), 'input has correct text alignment').to.equal(true);\n\n    (0, _dummyTestsHelpersEmberFrostCoreUtils.expectDisabledState)($input, state.disabled, 'input');\n\n    (0, _chai.expect)($input.hasClass('error'), 'input ' + (state.error ? 'has' : 'does not have') + ' error class').to.equal(state.error);['placeholder', 'tabIndex', 'type'].forEach(function (key) {\n      if (state[key]) {\n        (0, _chai.expect)($input.prop(key), 'input as expected ' + key).to.equal(state[key]);\n      }\n    });\n\n    if (state.value) {\n      (0, _chai.expect)($input.val(), 'input has expected value').to.equal(state.value);\n    }\n  }\n\n  /**\n   * Get list of text inputs\n   * @returns {jQuery} text inputs\n   * @param {FrostTextState} state - find inputs with state\n   */\n\n  function find(state) {\n    var $inputs = $('.frost-text input');\n\n    if (typeOf(state) !== 'object') {\n      return $inputs;\n    }\n\n    return $inputs.filter(function (index, input) {\n      if ('disabled' in state && input.disabled !== state.disabled || 'type' in state && input.type !== state.type) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n});\n/**\n * @typedef {Object} FrostTextState\n * @property {String} [align=\"left\"] - text alignment\n * @property {Boolean} [disabled=false] - whether or not input is disabled\n * @property {Boolean} [error=false] - whether or not input is in error state\n * @property {String} [placeholder] - placeholder text\n * @property {Number} [tabIndex=0] - tab index\n * @property {String} [type='text'] - input type\n * @property {String} [value] - value of input\n */","define('dummy/tests/helpers/ember-frost-core/utils', ['exports', 'chai'], function (exports, _chai) {\n  exports.expectDisabledState = expectDisabledState;\n  exports.expectToggleClass = expectToggleClass;\n\n  /**\n   * Expect element to have disabled state\n   * @param {jQuery} $element - element\n   * @param {Boolean} disabled - disabled\n   * @param {String} [type='element'] - type of element\n   */\n\n  function expectDisabledState($element, disabled) {\n    var type = arguments.length <= 2 || arguments[2] === undefined ? 'element' : arguments[2];\n\n    (0, _chai.expect)($element.is(':disabled'), type + ' is ' + (disabled ? 'disabled' : 'enabled')).to.equal(disabled);\n  }\n\n  /**\n   * Expect class on element depending on boolean state\n   * @param {jQuery} $element - element to check for class on\n   * @param {String} className - name of class\n   * @param {Boolean} state - whether or not class should be present\n   */\n\n  function expectToggleClass($element, className, state) {\n    if (state === undefined) {\n      return;\n    }\n\n    (0, _chai.expect)($element.hasClass(className), (state ? 'has' : 'does not have') + ' ' + className + ' class').to.equal(state);\n  }\n});","define('dummy/tests/helpers/ember-prop-types', ['exports', 'ember'], function (exports, _ember) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports.createComponent = createComponent;\n  var VERSION = _ember['default'].VERSION;\n\n  /**\n   * Determine if we are on a version of Ember that includes Glimmer 2\n   * @returns {Boolean} whether or not we are on Glimmer 2\n   */\n  function isGlimmer2() {\n    var _VERSION$split = VERSION.split('.');\n\n    var _VERSION$split2 = _slicedToArray(_VERSION$split, 2);\n\n    var major = _VERSION$split2[0];\n    var minor = _VERSION$split2[1];\n\n    return parseInt(major) > 1 && parseInt(minor) > 9;\n  }\n\n  /**\n   * Programitcally instantiate instance of component class\n   * @param {Ember.Component} component - component class to instantiate\n   * @returns {Ember.Component} instance of component class\n   */\n\n  function createComponent(component) {\n    if (isGlimmer2()) {\n      return component.create({ renderer: {} });\n    }\n\n    return component.create();\n  }\n});","define('dummy/tests/helpers/ember-test-utils/describe-component', ['exports', 'ember', 'dummy/tests/helpers/ember-test-utils/typedefs'], function (exports, _ember, _dummyTestsHelpersEmberTestUtilsTypedefs) {\n  exports.unit = unit;\n  exports.integration = integration;\n\n  var deprecationMsg = (0, _dummyTestsHelpersEmberTestUtilsTypedefs.getDeprecationMessage)('describeComponent');\n  var assign = _ember['default'].assign || _ember['default'].merge; // NOTE: only use two params in assign() since merge() doesn't take more\n\n  /**\n   * A shortcut for filling in the first three params in a describeComponent\n   * @param {String} name - the name of the component\n   * @param {Object} options - any additional options to set\n   * @returns {Object[]} an array of items that need to be passed in to describeComponent\n   */\n  function component(name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var testType = options.unit ? 'Unit' : 'Integration';\n    return [name, testType + ' / Component / ' + name, options];\n  }\n\n  /**\n   * A shortcut for filling in the first three params for describeComponent unit test\n   * @param {String} name - the name of the component\n   * @param {String[]} dependencies - the list of \"needs\" for this component\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Object[]} an array of items that need to be passed in to describeComponent\n   */\n\n  function unit(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-component.unit',\n      until: '2.0.0'\n    });\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n    return component(name, assign(options, { unit: true }));\n  }\n\n  /**\n   * A shortcut for filling in the first three params for describeComponent integration test\n   * @param {String} name - the name of the component\n   * @param {Object} options - any additional options to set (alongside integration: true)\n   * @returns {Object[]} an array of items that need to be passed in to describeComponent\n   */\n\n  function integration(name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-component.integration',\n      until: '2.0.0'\n    });\n    return component(name, assign(options, { integration: true }));\n  }\n});\n/**\n * Shortcuts for generating the params passed to describeComponent from ember-mocha\n */\n\n// NOTE: not destructuring 'deprecate' for ease of testing\n/* eslint-disable ember-standard/destructure */","define('dummy/tests/helpers/ember-test-utils/describe-model', ['exports', 'ember', 'dummy/tests/helpers/ember-test-utils/typedefs'], function (exports, _ember, _dummyTestsHelpersEmberTestUtilsTypedefs) {\n  exports.model = model;\n  exports.serializer = serializer;\n\n  var deprecationMsg = (0, _dummyTestsHelpersEmberTestUtilsTypedefs.getDeprecationMessage)('describeModel');\n\n  /**\n   * Generate an Array of the first 3 params to describeModel, so that we can keep the function definition on the\n   * same line as the describeModel call itself\n   * @param {String} name - the name of the model being tested\n   * @param {String[]} dependencies - the entries for the 'needs' property in the options for describeModel\n   * @param {Object} options - any additional options needed for describeModel\n   * @returns {Array} the first three params to describeModel\n   */\n\n  function model(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-model.model',\n      until: '2.0.0'\n    });\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n\n    return [name, 'Unit / Model / ' + name, options];\n  }\n\n  /**\n   * Generate an Array of the first 3 params to describeModel, so that we can keep the function definition on the\n   * same line as the describeModel call itself\n   * @param {String} name - the name of the model being tested\n   * @param {String[]} dependencies - the entries for the 'needs' property in the options for describeModel\n   * @param {Object} options - any additional options needed for describeModel\n   * @returns {Array} the first three params to describeModel\n   */\n\n  function serializer(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-model.serializer',\n      until: '2.0.0'\n    });\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n\n    return [name, 'Unit / Serializer / ' + name, options];\n  }\n});\n/**\n * Shortcut for generating the params passed to describeModel from ember-mocha\n */\n\n// NOTE not destructuring 'deprecate' for ease of testing\n/* eslint-disable ember-standard/destructure */","define('dummy/tests/helpers/ember-test-utils/describe-module', ['exports', 'ember', 'dummy/tests/helpers/ember-test-utils/typedefs'], function (exports, _ember, _dummyTestsHelpersEmberTestUtilsTypedefs) {\n  exports.module = _module;\n  exports.route = route;\n  exports.controller = controller;\n\n  var deprecationMsg = (0, _dummyTestsHelpersEmberTestUtilsTypedefs.getDeprecationMessage)('describeModule');\n\n  /**\n   * Generate an Array of the first 3 params to describeModule, so that we can keep the function definition on the\n   * same line as the describeModule call itself\n   * @param {String} type - the type of module being tested ('controller', 'route', 'service', 'serializer', etc.)\n   * @param {String} name - the name of the module being tested\n   * @param {String[]} dependencies - the entries for the 'needs' property in the options for describeModel\n   * @param {Object} options - any additional options needed for describeModule\n   * @returns {Array} the first three params to describeModule\n   */\n\n  function _module(type, name, dependencies) {\n    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-module.module',\n      until: '2.0.0'\n    });\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n\n    return [type + ':' + name, 'Unit / ' + _ember['default'].String.classify(type) + ' / ' + name, options];\n  }\n\n  /**\n   * Generate an Array of the first 3 params to describeModule, so that we can keep the function definition on the\n   * same line as the describeModule call itself, assumes a route type\n   * @param {String} name - the name of the module being tested\n   * @param {String[]} dependencies - the entries for the 'needs' property in the options for describeModel\n   * @param {Object} options - any additional options needed for describeModule\n   * @returns {Array} the first three params to describeModule\n   */\n\n  function route(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-module.route',\n      until: '2.0.0'\n    });\n\n    return _module('route', name, dependencies, options);\n  }\n\n  /**\n   * Generate an Array of the first 3 params to describeModule, so that we can keep the function definition on the\n   * same line as the describeModule call itself, assumes a controller type\n   * @param {String} name - the name of the module being tested\n   * @param {String[]} dependencies - the entries for the 'needs' property in the options for describeModel\n   * @param {Object} options - any additional options needed for describeModule\n   * @returns {Array} the first three params to describeModule\n   */\n\n  function controller(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _ember['default'].deprecate(deprecationMsg, false, {\n      id: 'ember-test-utils.describe-module.controller',\n      until: '2.0.0'\n    });\n\n    return _module('controller', name, dependencies, options);\n  }\n});\n/**\n * Shortcut for generating the params passed to describeModule from ember-mocha\n */\n\n// NOTE not destructuring 'deprecate' for ease of testing\n/* eslint-disable ember-standard/destructure */","define('dummy/tests/helpers/ember-test-utils/ember-data', ['exports', 'ember'], function (exports, _ember) {\n  exports.stubStore = stubStore;\n  exports.returnPromiseWithArgs = returnPromiseWithArgs;\n\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n  var RSVP = _ember['default'].RSVP;\n  var Service = _ember['default'].Service;\n\n  /**\n   * @typedef Resolver\n   * A resolver for a particular Promise, used to resolve or reject said Promise\n   * @property {Function} resolve - the method to call to resolve the Promise\n   * @property {Function} reject - the method to call to reject the Promise\n   */\n\n  /**\n   * The methods in DS.Store we want to stub\n   * Taken from http://emberjs.com/api/data/classes/DS.Store.html\n   */\n  var storeMethodsToStub = ['adapterFor', 'buildRecord', 'createRecord', 'dataWasUpdated', 'deleteRecord', 'didSaveRecord', 'didUpdateAll', 'fetchRecord', 'find', 'findAll', 'findBelongsTo', 'findByIds', 'findHasMany', 'findMany', 'findRecord', 'flushPendingSave', 'getReference', 'hashRecordForId', 'init', 'modelFor', 'normalize', 'peekAll', 'peekRecord', 'push', 'pushPayload', 'query', 'queryRecord', 'recordForId', 'recordIsLoaded', 'recordWasError', 'recordWasInvalid', 'reloadRecord', 'retrieveManagedInstance', 'scheduleSave', 'serialize', 'serializeFor', 'typeMapFor', 'unloadAll', 'unloadRecord', 'updateId'];\n\n  /**\n   * Stub the ember data store\n   * @param {Object} context - the test context ('this' from within beforeEach)\n   * @param {Object} sandbox - the sinon sandbox to use for generating stubs\n   * @returns {Store} the store with stubs for all methods (consumer must still provide return values)\n   */\n\n  function stubStore(context, sandbox) {\n    var stubs = {};\n    storeMethodsToStub.forEach(function (method) {\n      stubs[method] = sandbox.stub();\n    });\n\n    context.register('service:store', Service.extend(stubs));\n    return context.container.lookup('service:store');\n  }\n\n  /**\n   * Stub out a particular method with specific arguments to return a promise\n   * @param {Stub} stub - the stubbed method\n   * @param {Object[]} args - the arguments to stub for\n   * @returns {Resolver} the resolver for the promise that will be returned\n   */\n\n  function returnPromiseWithArgs(stub, args) {\n    var resolver = {};\n    var promise = new RSVP.Promise(function (resolve, reject) {\n      resolver.resolve = resolve;\n      resolver.reject = reject;\n    });\n\n    resolver.promise = promise;\n\n    if (args) {\n      stub.withArgs.apply(stub, _toConsumableArray(args)).returns(promise);\n    } else {\n      stub.withArgs().returns(promise);\n    }\n\n    return resolver;\n  }\n});\n/**\n * Helpers to make it very easy to stub-out the ember data store in integration tests, regardless of\n * how deep the reference to them happens to be. If it's the component under test, this might be a little\n * overkill, since you could have just initialized with the stub store, but it will work for that use-case too.\n */","define('dummy/tests/helpers/ember-test-utils/ember-intl', ['exports'], function (exports) {\n  exports.addEmberIntlDeps = addEmberIntlDeps;\n  exports.needsEmberIntlDeps = needsEmberIntlDeps;\n  /**\n   * Helpers for doing tests with ember-intl\n   */\n\n  /**\n   * Additional ember-intl dependencies\n   * @see {@link https://github.com/jasonmit/ember-intl/blob/master/docs/unit-testing.md#unit-testing}\n   */\n  var emberIntlDeps = ['ember-intl@adapter:default', // required with format-message\n  'ember-intl@formatter:format-message', // optional\n  'ember-intl@formatter:format-html-message', // optional\n  'ember-intl@formatter:format-date', // optional\n  'ember-intl@formatter:format-time', // optional\n  'ember-intl@formatter:format-number', // optional\n  'ember-intl@formatter:format-relative', // optional\n  'helper:intl-get', // optional\n  'helper:t', // optional, if used then be sure to include the format-message formatter above\n  'helper:t-html', // optional, if used then be sure to include the format-html-message formatter above\n  'helper:format-date', // optional\n  'helper:format-time', // optional\n  'helper:format-relative', // optional\n  'helper:format-number' // optional\n  ];\n\n  exports.emberIntlDeps = emberIntlDeps;\n  /**\n   * Add all the dependencies listed as required or optional from ember-intl documentation\n   * @param {String[]} deps - the list of dependencies (it will be mutated)\n   */\n\n  function addEmberIntlDeps(deps) {\n    emberIntlDeps.forEach(function (dep) {\n      deps.push(dep);\n    });\n  }\n\n  /**\n   * Check if a given set of options requires additional ember-intl dependencies\n   * @param {Object} options - the options for the test\n   * @returns {Boolean} true if additional ember-intl dependencies are needed\n   */\n\n  function needsEmberIntlDeps(options) {\n    return options.unit === true && options.needs !== undefined && options.needs.includes('service:intl');\n  }\n});","define('dummy/tests/helpers/ember-test-utils/index', ['exports', 'dummy/tests/helpers/ember-test-utils/object-diff'], function (exports, _dummyTestsHelpersEmberTestUtilsObjectDiff) {\n  /**\n   * Main entry-point for the ember-test-utils test helpers\n   */\n\n  Object.defineProperty(exports, 'diffObject', {\n    enumerable: true,\n    get: function get() {\n      return _dummyTestsHelpersEmberTestUtilsObjectDiff['default'];\n    }\n  });\n});","define('dummy/tests/helpers/ember-test-utils/object-diff', ['exports', 'ember', 'lodash'], function (exports, _ember, _lodash) {\n  exports['default'] = diffObject;\n  var deprecate = _ember['default'].deprecate;\n  var ARRAY_PLACEHOLDER = '<%ARRAY_PLACEHOLDER%> elements equal';\n\n  exports.ARRAY_PLACEHOLDER = ARRAY_PLACEHOLDER;\n  var isArray = Array.isArray;\n  var keys = Object.keys;\n\n  function diffValue(obj1Value, obj2Value) {\n    if (isArray(obj1Value) && isArray(obj2Value)) {\n      return diffArray(obj1Value, obj2Value);\n    } else if (_lodash['default'].isObject(obj1Value) && _lodash['default'].isObject(obj2Value)) {\n      return diffObject(obj1Value, obj2Value);\n    } else if (!_lodash['default'].isEqual(obj1Value, obj2Value)) {\n      return {\n        differentKeys: [undefined],\n        leftOnlyKeys: [],\n        rightOnlyKeys: [],\n        leftDiff: obj1Value,\n        rightDiff: obj2Value\n      };\n    }\n    return {\n      differentKeys: [],\n      leftOnlyKeys: [],\n      rightOnlyKeys: []\n    };\n  }\n  function completePath(key, nextKey) {\n    if (nextKey === undefined) {\n      return key;\n    }\n    return key + '.' + nextKey;\n  }\n  function diffArray(obj1Value, obj2Value) {\n    var leftDiff = [];\n    var rightDiff = [];\n    var differentKeys = [];\n    var rightOnlyKeys = [];\n    var leftOnlyKeys = [];\n\n    var length = Math.min(obj1Value.length, obj2Value.length);\n    var i = undefined;\n    for (i = 0; i < length; ++i) {\n      var result = diffValue(obj1Value[i], obj2Value[i]);\n      var completeIndexPath = _lodash['default'].partial(completePath, i);\n      var hasMinusDiff = false;\n      var hasRightDiff = false;\n\n      if (result.leftOnlyKeys.length > 0) {\n        leftOnlyKeys.push.apply(leftOnlyKeys, result.leftOnlyKeys.map(completeIndexPath));\n        if (!_lodash['default'].isEmpty(result.leftDiff)) {\n          leftDiff.push(result.leftDiff);\n          hasMinusDiff = true;\n        }\n      }\n\n      if (result.rightOnlyKeys.length > 0) {\n        rightOnlyKeys.push.apply(rightOnlyKeys, result.rightOnlyKeys.map(completeIndexPath));\n        if (!_lodash['default'].isEmpty(result.rightDiff)) {\n          rightDiff.push(result.rightDiff);\n          hasRightDiff = true;\n        }\n      }\n      if (result.differentKeys.length > 0) {\n        differentKeys.push.apply(differentKeys, result.differentKeys.map(completeIndexPath));\n        leftDiff.push(result.leftDiff);\n        rightDiff.push(result.rightDiff);\n        hasMinusDiff = true;\n        hasRightDiff = true;\n      }\n      if (!hasMinusDiff) {\n        leftDiff.push(ARRAY_PLACEHOLDER);\n      }\n      if (!hasRightDiff) {\n        rightDiff.push(ARRAY_PLACEHOLDER);\n      }\n    }\n\n    if (obj1Value.length >= obj2Value.length) {\n      length = obj2Value.length;\n      var _i = undefined;\n      for (_i = length; _i < obj1Value.length; ++_i) {\n        leftOnlyKeys.push(_i);\n        leftDiff.push(obj1Value[_i]);\n      }\n    } else if (obj1Value.length < obj2Value.length) {\n      length = obj1Value.length;\n      var _i2 = undefined;\n      for (_i2 = length; _i2 < obj2Value.length; ++_i2) {\n        rightOnlyKeys.push(_i2);\n        rightDiff.push(obj2Value[_i2]);\n      }\n    }\n\n    return {\n      differentKeys: differentKeys,\n      leftOnlyKeys: leftOnlyKeys,\n      leftDiff: leftDiff,\n      rightOnlyKeys: rightOnlyKeys,\n      rightDiff: rightDiff\n    };\n  }\n\n  function diffObject(obj1, obj2) {\n    deprecate('diffObject is deprecated, and will soon be removed. Hopefully to be replaced with a chai helper', false, {\n      id: 'ember-test-utils.diffObject',\n      until: '2.0.0'\n    });\n    var obj1Keys = keys(obj1);\n    var obj2Keys = keys(obj2);\n\n    var rightOnlyKeys = _lodash['default'].reject(obj2Keys, _lodash['default'].partial(_lodash['default'].includes, obj1Keys));\n    var leftOnlyKeys = _lodash['default'].reject(obj1Keys, _lodash['default'].partial(_lodash['default'].includes, obj2Keys));\n    var commonKeys = _lodash['default'].intersection(obj1Keys, obj2Keys);\n\n    var leftDiff = {};\n\n    leftOnlyKeys.forEach(function (key) {\n      leftDiff[key] = _lodash['default'].cloneDeep(obj1[key]);\n    });\n\n    var rightDiff = {};\n\n    rightOnlyKeys.forEach(function (key) {\n      rightDiff[key] = _lodash['default'].cloneDeep(obj2[key]);\n    });\n\n    var differentKeyList = [];\n\n    commonKeys.forEach(function (key) {\n      var obj1Value = obj1[key];\n      var obj2Value = obj2[key];\n      var completeKeyPath = _lodash['default'].partial(completePath, key);\n\n      if (isArray(obj1Value) && isArray(obj2Value)) {\n        var result = diffArray(obj1Value, obj2Value);\n        if (result.differentKeys.length > 0) {\n          differentKeyList.push(result.differentKeys.map(completeKeyPath));\n          leftDiff[key] = result.leftDiff;\n          rightDiff[key] = result.rightDiff;\n        }\n\n        if (result.leftOnlyKeys.length > 0) {\n          leftOnlyKeys.push.apply(leftOnlyKeys, result.leftOnlyKeys.map(completeKeyPath));\n          if (!_lodash['default'].isEmpty(result.leftDiff)) {\n            leftDiff[key] = result.leftDiff;\n          }\n        }\n\n        if (result.rightOnlyKeys.length > 0) {\n          rightOnlyKeys.push.apply(rightOnlyKeys, result.rightOnlyKeys.map(completeKeyPath));\n          if (!_lodash['default'].isEmpty(result.rightDiff)) {\n            rightDiff[key] = result.rightDiff;\n          }\n        }\n      } else if (_lodash['default'].isObject(obj1Value) && _lodash['default'].isObject(obj2Value)) {\n        var result = diffObject(obj1Value, obj2Value);\n        if (result.differentKeys.length > 0) {\n          differentKeyList.push(result.differentKeys.map(completeKeyPath));\n          leftDiff[key] = result.leftDiff;\n          rightDiff[key] = result.rightDiff;\n        }\n\n        if (result.leftOnlyKeys.length > 0) {\n          leftOnlyKeys.push.apply(leftOnlyKeys, result.leftOnlyKeys.map(completeKeyPath));\n          if (!_lodash['default'].isEmpty(result.leftDiff)) {\n            leftDiff[key] = result.leftDiff;\n          }\n        }\n\n        if (result.rightOnlyKeys.length > 0) {\n          rightOnlyKeys.push.apply(rightOnlyKeys, result.rightOnlyKeys.map(completeKeyPath));\n          if (!_lodash['default'].isEmpty(result.rightDiff)) {\n            rightDiff[key] = result.rightDiff;\n          }\n        }\n      } else if (!_lodash['default'].isEqual(obj1Value, obj2Value)) {\n        leftDiff[key] = obj1Value;\n        rightDiff[key] = obj2Value;\n        differentKeyList.push(key);\n      }\n    });\n\n    return {\n      differentKeys: _lodash['default'].flatten(differentKeyList),\n      rightOnlyKeys: rightOnlyKeys,\n      leftOnlyKeys: leftOnlyKeys,\n      rightDiff: rightDiff,\n      leftDiff: leftDiff\n    };\n  }\n});\n// TODO: remove below comment and address cmplexity issues (MRD - 2016-12-01)\n/* eslint-disable complexity */","define('dummy/tests/helpers/ember-test-utils/setup-component-test', ['exports', 'ember', 'ember-mocha', 'dummy/tests/helpers/ember-test-utils/ember-intl', 'dummy/tests/helpers/ember-test-utils/typedefs'], function (exports, _ember, _emberMocha, _dummyTestsHelpersEmberTestUtilsEmberIntl, _dummyTestsHelpersEmberTestUtilsTypedefs) {\n  exports.unit = unit;\n  exports.integration = integration;\n\n  var assign = _ember['default'].assign || _ember['default'].merge; // NOTE: only use two params in assign() since merge() doesn't take more\n\n  // Workaround to allow stubbing dependencies during testing\n  var deps = {\n    addEmberIntlDeps: _dummyTestsHelpersEmberTestUtilsEmberIntl.addEmberIntlDeps,\n    needsEmberIntlDeps: _dummyTestsHelpersEmberTestUtilsEmberIntl.needsEmberIntlDeps,\n    setupComponentTest: _emberMocha.setupComponentTest\n  };\n\n  exports.deps = deps;\n  /**\n   * A helper to format describe text as well as configure setupComponent from ember-mocha\n   * @param {String} name - the name of the component\n   * @param {Object} options - any additional options to set\n   * @returns {Test} a test config object\n   */\n  function component(name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var testType = options.unit ? 'Unit' : 'Integration';\n\n    if (deps.needsEmberIntlDeps(options)) {\n      deps.addEmberIntlDeps(options.needs);\n    }\n\n    return {\n      label: testType + ' / Component / ' + name + ' /',\n      setup: function setup() {\n        deps.setupComponentTest(name, options);\n      }\n    };\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupComponentTest with proper params\n   * for a component unit test\n   * @param {String} name - the name of the component\n   * @param {String[]} dependencies - the list of \"needs\" for this component\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Test} a test config object\n   */\n\n  function unit(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n    return component(name, assign(options, { unit: true }));\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupComponentTest with proper params\n   * for a component integration test\n   * @param {String} name - the name of the component\n   * @param {Object} options - any additional options to set (alongside integration: true)\n   * @returns {Test} a test config object\n   */\n\n  function integration(name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    return component(name, assign(options, { integration: true }));\n  }\n});\n/**\n * Helper for streamlining setting up component tests\n */\n\n/* eslint-disable ember-standard/destructure */","define('dummy/tests/helpers/ember-test-utils/setup-test', ['exports', 'ember', 'ember-mocha', 'dummy/tests/helpers/ember-test-utils/ember-intl', 'dummy/tests/helpers/ember-test-utils/typedefs'], function (exports, _ember, _emberMocha, _dummyTestsHelpersEmberTestUtilsEmberIntl, _dummyTestsHelpersEmberTestUtilsTypedefs) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports.module = _module;\n  exports.model = model;\n  exports.serializer = serializer;\n  exports.route = route;\n  exports.controller = controller;\n\n  // Workaround to allow stubbing dependencies during testing\n  var deps = {\n    addEmberIntlDeps: _dummyTestsHelpersEmberTestUtilsEmberIntl.addEmberIntlDeps,\n    needsEmberIntlDeps: _dummyTestsHelpersEmberTestUtilsEmberIntl.needsEmberIntlDeps,\n    setupModelTest: _emberMocha.setupModelTest,\n    setupTest: _emberMocha.setupTest\n  };\n\n  exports.deps = deps;\n  /**\n   * A helper to format describe text as well as configure setupTest from ember-mocha\n   * @param {String} name - the name of the module (including type, i.e. 'controller:foo')\n   * @param {Object} options - any additional options to set\n   * @returns {Test} a test config object\n   */\n\n  function _module(name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    if (!options.unit && !options.integration) {\n      options.unit = true;\n    }\n\n    if (deps.needsEmberIntlDeps(options)) {\n      deps.addEmberIntlDeps(options.needs);\n    }\n\n    var testType = options.unit ? 'Unit' : 'Integration';\n\n    var _name$split = name.split(':');\n\n    var _name$split2 = _slicedToArray(_name$split, 2);\n\n    var moduleType = _name$split2[0];\n    var moduleName = _name$split2[1];\n\n    return {\n      label: testType + ' / ' + _ember['default'].String.classify(moduleType) + ' / ' + moduleName + ' /',\n      setup: function setup() {\n        deps.setupTest(name, options);\n      }\n    };\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupTest with proper parameters for a model unit test\n   * @param {String} name - the name of the model\n   * @param {String[]} dependencies - the list of \"needs\" for this model\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Test} a test config object\n   */\n\n  function model(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n\n    if (!options.unit && !options.integration) {\n      options.unit = true;\n    }\n\n    if (deps.needsEmberIntlDeps(options)) {\n      deps.addEmberIntlDeps(options.needs);\n    }\n\n    var testType = options.unit ? 'Unit' : 'Integration';\n    return {\n      label: testType + ' / Model / ' + name + ' /',\n      setup: function setup() {\n        deps.setupModelTest(name, options);\n      }\n    };\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupTest with proper parameters for a serializer unit test\n   * @param {String} name - the name of the serializer\n   * @param {String[]} dependencies - the list of \"needs\" for this serializer\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Test} a test config object\n   */\n\n  function serializer(name) {\n    var dependencies = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    options.needs = dependencies;\n\n    // if the model for this serializer isn't a dependency, add it\n    if (!options.needs.includes('model:' + name)) {\n      options.needs.push('model:' + name);\n    }\n\n    if (!options.unit && !options.integration) {\n      options.unit = true;\n    }\n\n    if (deps.needsEmberIntlDeps(options)) {\n      deps.addEmberIntlDeps(options.needs);\n    }\n\n    var testType = options.unit ? 'Unit' : 'Integration';\n    return {\n      label: testType + ' / Serializer / ' + name + ' /',\n      setup: function setup() {\n        deps.setupModelTest(name, options);\n      }\n    };\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupTest with proper parameters for a route unit test\n   * @param {String} name - the name of the route\n   * @param {String[]} dependencies - the list of \"needs\" for this route\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Test} a test config object\n   */\n\n  function route(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n    return _module('route:' + name, options);\n  }\n\n  /**\n   * A helper for formatting the describe text and calling setupTest with proper parameters for a controller unit test\n   * @param {String} name - the name of the controller\n   * @param {String[]} dependencies - the list of \"needs\" for this controller\n   * @param {Object} options - any additional options to set (alongside unit: true)\n   * @returns {Test} a test config object\n   */\n\n  function controller(name, dependencies) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    if (dependencies) {\n      options.needs = dependencies;\n    }\n    return _module('controller:' + name, options);\n  }\n});\n/**\n * Helper for streamlining setting up mocha tests\n */","define(\"dummy/tests/helpers/ember-test-utils/typedefs\", [\"exports\"], function (exports) {\n  exports.getDeprecationMessage = getDeprecationMessage;\n  /**\n   * Type definitions used in ember-test-utils helpers\n   */\n\n  /**\n   * @typedef Test\n   * Configuration information for a test\n   * @property {String} label - the label for the test (to be passed as first param to describe())\n   * @property {Function} setup - a function that will call setupComponent or setupTest to setup the mocha test\n   */\n\n  /**\n   * Helper to ease creation of deprecation messages\n   * @param {String} methodName - the name of the method the deprecated helper was helping\n   * @returns {String} the deprecation message\n   */\n\n  function getDeprecationMessage(methodName) {\n    return methodName + \"() helpers have been deprecated since \" + methodName + \"() itself is now deprecated\";\n  }\n});","define('dummy/tests/helpers/mock-component', ['exports', 'ember'], function (exports, _ember) {\n  exports.registerMockComponent = registerMockComponent;\n  exports.unregisterMockComponent = unregisterMockComponent;\n  var Component = _ember['default'].Component;\n  var getOwner = _ember['default'].getOwner;\n  var merge = _ember['default'].merge;\n\n  function registerMockComponent(context) {\n    var name = arguments.length <= 1 || arguments[1] === undefined ? 'mock-component' : arguments[1];\n    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var owner = getOwner(context);\n    var options = merge({ tagName: 'dummy' }, opts);\n    var mockComponent = Component.extend(options);\n\n    unregisterMockComponent(context);\n    owner.register('component:' + name, mockComponent);\n  }\n\n  function unregisterMockComponent(context) {\n    var name = arguments.length <= 1 || arguments[1] === undefined ? 'mock-component' : arguments[1];\n\n    var owner = getOwner(context);\n\n    if (owner.resolveRegistration('component:' + name)) {\n      owner.unregister('component:' + name);\n    }\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/destroy-app', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _dummyTestsHelpersDestroyApp, _dummyTestsHelpersStartApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/config/environment', 'dummy/resolver'], function (exports, _dummyConfigEnvironment, _dummyResolver) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n  var merge = _ember['default'].merge;\n  var run = _ember['default'].run;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/integration/components/frost-list-content-container-test', ['exports', 'chai', 'ember-hook', 'ember-test-helpers/wait', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _emberHook, _emberTestHelpersWait, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-content-container');\n  _mocha.describe.skip(test.label, function () {\n    test.setup();\n\n    var sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    (0, _mocha.it)('should have real tests', function () {\n      (0, _chai.expect)(true).to.equal(false);\n    });\n\n    (0, _mocha.describe)('after render', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.setProperties({\n          myHook: 'myThing'\n        });\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'hGXMsT3l',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list-content-container\"],null,[[\"hook\"],[[\"get\",[\"myHook\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n\n        return (0, _emberTestHelpersWait['default'])();\n      });\n\n      (0, _mocha.it)('should have an element', function () {\n        (0, _chai.expect)(this.$()).to.have.length(1);\n      });\n\n      (0, _mocha.it)('should be accessible via the hook', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('myThing')).to.have.length(1);\n      });\n    });\n  });\n});\n/**\n * Integration test for the frost-list-content-container component\n */","define('dummy/tests/integration/components/frost-list-core-test', ['exports', 'chai', 'mocha', 'dummy/tests/helpers/mock-component', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _dummyTestsHelpersMockComponent, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-core');\n  _mocha.describe.skip(test.label, function () {\n    test.setup();\n\n    _mocha.it.skip('Header section renders when \"sorting\" is passed in', function () {\n      (0, _dummyTestsHelpersMockComponent.registerMockComponent)(this, 'mock-sort');\n\n      this.render(Ember.HTMLBars.template({\n        'id': '8Oys20zW',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-core\"],null,[[\"sorting\"],[[\"helper\",[\"component\"],[\"mock-sort\"],[[\"class\"],[\"mock-sort\"]]]]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-header'), 'header section is rendered').to.have.length(1);\n\n      (0, _chai.expect)(this.$('.mock-sort'), 'sort component is rendered').to.have.length(1);\n\n      (0, _dummyTestsHelpersMockComponent.unregisterMockComponent)(this);\n    });\n\n    _mocha.it.skip('Header section renders when \"expansion\" is passed in', function () {\n      (0, _dummyTestsHelpersMockComponent.registerMockComponent)(this, 'mock-expansion');\n\n      this.render(Ember.HTMLBars.template({\n        'id': 'gK6kVktk',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-core\"],null,[[\"expansion\"],[[\"helper\",[\"component\"],[\"mock-expansion\"],[[\"class\"],[\"mock-expansion\"]]]]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-header'), 'header section is rendered').to.have.length(1);\n\n      (0, _chai.expect)(this.$('.mock-expansion'), 'expansion component is rendered').to.have.length(1);\n\n      (0, _dummyTestsHelpersMockComponent.unregisterMockComponent)(this);\n    });\n  });\n});","define('dummy/tests/integration/components/frost-list-expansion-test', ['exports', 'chai', 'ember-hook', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _emberHook, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-expansion');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      (0, _emberHook.initialize)();\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    _mocha.it.skip('renders with default class', function () {\n      this.render(Ember.HTMLBars.template({\n        'id': 'AWEOUJdm',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-expansion\"],null,[[\"onCollapseAll\",\"onExpandAll\"],[\"onCollapseAll\",\"onExpandAll\"]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-expansion')).to.be.length(1);\n    });\n\n    _mocha.it.skip('fires onCollapseAll closure action', function () {\n      var collapseAllSpy = sandbox.spy();\n\n      this.on('collapseAllAction', collapseAllSpy);\n\n      this.render(Ember.HTMLBars.template({\n        'id': 'JyUNvaqZ',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-expansion\"],null,[[\"onCollapseAll\",\"onExpandAll\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"collapseAllAction\"],null],\"onExpandAll\"]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      this.$((0, _emberHook.$hook)('-collapse-all')).trigger('click');\n\n      (0, _chai.expect)(collapseAllSpy.called).to.eql(true);\n    });\n\n    _mocha.it.skip('fires onExpandAll closure action', function () {\n      var expandAllSpy = sandbox.spy();\n\n      this.on('expandAllAction', expandAllSpy);\n\n      this.render(Ember.HTMLBars.template({\n        'id': 'Vqw+WV0a',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-expansion\"],null,[[\"onCollapseAll\",\"onExpandAll\"],[\"onCollapseAll\",[\"helper\",[\"action\"],[[\"get\",[null]],\"expandAllAction\"],null]]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      this.$((0, _emberHook.$hook)('-expand-all')).trigger('click');\n\n      (0, _chai.expect)(expandAllSpy.called).to.eql(true);\n    });\n\n    _mocha.describe.skip('concatenates the hook property', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.render(Ember.HTMLBars.template({\n          'id': '/ppTYoaZ',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list-expansion\"],null,[[\"hook\",\"onCollapseAll\",\"onExpandAll\"],[\"my-list\",\"onCollapseAll\",\"onExpandAll\"]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('sets -collapse-all hook correctly', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-collapse-all').text().trim()).to.equal('Collapse all');\n      });\n\n      (0, _mocha.it)('sets -expand-all hook correctly', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-expand-all').text().trim()).to.equal('Expand all');\n      });\n    });\n  });\n});","define(\"dummy/tests/integration/components/frost-list-item-expansion-test\", [\"exports\"], function (exports) {});\n/**\n * Integration test for the frost-list-item-expansion component\n */\n\n// import {expect} from 'chai'\n// import hbs from 'htmlbars-inline-precompile'\n// import {$hook, initialize as initializeHook} from 'ember-hook'\n// import wait from 'ember-test-helpers/wait'\n// import {afterEach, beforeEach, describe, it} from 'mocha'\n// import sinon from 'sinon'\n\n// import {integration} from 'dummy/tests/helpers/ember-test-utils/setup-component-test'\n\n// const test = integration('frost-list-item-expansion')\n// describe(test.label, function () {\n//   test.setup()\n\n//   let sandbox\n\n//   beforeEach(function () {\n//     sandbox = sinon.sandbox.create()\n//     initializeHook()\n//   })\n\n//   afterEach(function () {\n//     sandbox.restore()\n//   })\n\n//   it.skip('should have real tests', function () {\n//     expect(true).to.equal(false)\n//   })\n\n//   describe.skip('after render', function () {\n//     beforeEach(function () {\n//       this.setProperties({\n//         myHook: 'myThing'\n//       })\n\n//       this.render(hbs`\n//         {{frost-list-item-expansion\n//           hook=myHook\n//         }}\n//       `)\n\n//       return wait()\n//     })\n\n//     it('should have an element', function () {\n//       expect(this.$()).to.have.length(1)\n//     })\n\n//     it('should be accessible via the hook', function () {\n//       expect($hook('myThing')).to.have.length(1)\n//     })\n//   })\n// })","define(\"dummy/tests/integration/components/frost-list-item-selection-test\", [\"exports\"], function (exports) {});\n/**\n * Integration test for the frost-list-item-selection component\n */\n\n// import {expect} from 'chai'\n// import hbs from 'htmlbars-inline-precompile'\n// import {$hook, initialize as initializeHook} from 'ember-hook'\n// import wait from 'ember-test-helpers/wait'\n// import {afterEach, beforeEach, describe, it} from 'mocha'\n// import sinon from 'sinon'\n\n// import {integration} from 'dummy/tests/helpers/ember-test-utils/setup-component-test'\n\n// const test = integration('frost-list-item-selection')\n// describe(test.label, function () {\n//   test.setup()\n\n//   let sandbox\n\n//   beforeEach(function () {\n//     sandbox = sinon.sandbox.create()\n//     initializeHook()\n//   })\n\n//   afterEach(function () {\n//     sandbox.restore()\n//   })\n\n//   it.skip('should have real tests', function () {\n//     expect(true).to.equal(false)\n//   })\n\n//   describe.skip('after render', function () {\n//     beforeEach(function () {\n//       this.setProperties({\n//         myHook: 'myThing'\n//       })\n\n//       this.render(hbs`\n//         {{frost-list-item-selection\n//           hook=myHook\n//         }}\n//       `)\n\n//       return wait()\n//     })\n\n//     it('should have an element', function () {\n//       expect(this.$()).to.have.length(1)\n//     })\n\n//     it('should be accessible via the hook', function () {\n//       expect($hook('myThing')).to.have.length(1)\n//     })\n//   })\n// })","define('dummy/tests/integration/components/frost-list-item-test', ['exports', 'chai', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-item');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    _mocha.describe.skip('default state has no class \"is-selected\" and \"is-expanded\"', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.render(Ember.HTMLBars.template({\n          'id': 'l9uNvo3r',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"unknown\",[\"frost-list-item\"]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('does NOT set \"is-selected\" class', function () {\n        (0, _chai.expect)(this.$('.frost-list-item').hasClass('is-selected')).to.eql(false);\n      });\n\n      (0, _mocha.it)('does NOT set \"is-expanded\" class', function () {\n        (0, _chai.expect)(this.$('.frost-list-item').hasClass('is-expanded')).to.eql(false);\n      });\n    });\n\n    _mocha.it.skip('sets \"is-selected\" class when model.isSelected=true', function () {\n      this.set('model', { isSelected: true });\n\n      this.render(Ember.HTMLBars.template({\n        'id': '8pPd7vmj',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-item\"],null,[[\"model\"],[[\"get\",[\"model\"]]]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-item').hasClass('is-selected')).to.eql(true);\n    });\n\n    _mocha.it.skip('sets \"is-expanded\" class when model.isSelected=true', function () {\n      this.set('model', { isExpanded: true });\n\n      this.render(Ember.HTMLBars.template({\n        'id': '8pPd7vmj',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-item\"],null,[[\"model\"],[[\"get\",[\"model\"]]]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-item').hasClass('is-expanded')).to.eql(true);\n    });\n\n    _mocha.describe.skip('onSelect closure action', function () {\n      var externalActionSpy = undefined;\n      (0, _mocha.beforeEach)(function () {\n        externalActionSpy = sandbox.spy();\n\n        this.on('externalAction', externalActionSpy);\n        this.set('model', { isSelected: true });\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'cpMYzlY5',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list-item\"],null,[[\"model\",\"onSelect\"],[[\"get\",[\"model\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"externalAction\"],null]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n\n        this.$('.frost-list-item').trigger('click');\n      });\n\n      (0, _mocha.it)('passes event obeject', function () {\n        (0, _chai.expect)(externalActionSpy.args[0][0]).to.have.property('type', 'click');\n      });\n\n      (0, _mocha.it)('passes \"record\" property', function () {\n        (0, _chai.expect)(externalActionSpy.args[0][1].record.isSelected).to.eql(true);\n      });\n\n      (0, _mocha.it)('passes selectDesc object', function () {\n        (0, _chai.expect)(externalActionSpy.args[0][1].selectDesc).to.eql({\n          'isSelected': false,\n          'isTargetSelectionIndicator': false\n        });\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/frost-list-pagination-test', ['exports', 'chai', 'ember-hook', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _emberHook, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-pagination');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      (0, _emberHook.initialize)();\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    _mocha.describe.skip('default render state', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.set('actions', {\n          onChange: function onChange() {}\n        });\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'Y23IgUkR',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-pagination\"],null,[[\"itemsPerPage\",\"page\",\"total\",\"hook\",\"onChange\"],[10,0,100,\"myHook\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onChange\"],null]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('sets frost-pagination class', function () {\n        (0, _chai.expect)(this.$('.frost-pagination')).to.have.length(1);\n      });\n\n      (0, _mocha.it)('shows correct pagination text', function () {\n        (0, _chai.expect)(this.$('.frost-pagination-text').text().trim()).to.eql('1 to 10 of 100');\n      });\n\n      (0, _mocha.describe)('hooks', function () {\n        (0, _mocha.it)('sets \"-first-page\" hook', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-first-page'))).to.have.length(1);\n        });\n\n        (0, _mocha.it)('sets \"-previous-page\" hook', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-previous-page'))).to.have.length(1);\n        });\n\n        (0, _mocha.it)('sets \"-next-page\" hook', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-next-page'))).to.have.length(1);\n        });\n\n        (0, _mocha.it)('sets \"-last-page\" hook', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-last-page'))).to.have.length(1);\n        });\n      });\n\n      (0, _mocha.describe)('disables buttons on the left', function () {\n        (0, _mocha.it)('disables \"first page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-first-page')).prop('disabled')).to.eql(true);\n        });\n\n        (0, _mocha.it)('disables \"previous page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-previous-page')).prop('disabled')).to.eql(true);\n        });\n      });\n\n      (0, _mocha.describe)('enables buttons on the right', function () {\n        (0, _mocha.it)('enables \"last page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-last-page')).prop('disabled')).to.eql(false);\n        });\n\n        (0, _mocha.it)('enables \"next page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-next-page')).prop('disabled')).to.eql(false);\n        });\n      });\n    });\n\n    _mocha.describe.skip('on page \"11 to 20\"', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.set('actions', {\n          onChange: function onChange() {}\n        });\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'O1vl19GK',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-pagination\"],null,[[\"itemsPerPage\",\"page\",\"total\",\"hook\",\"onChange\"],[10,1,100,\"myHook\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onChange\"],null]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('shows correct pagination text', function () {\n        (0, _chai.expect)(this.$('.frost-pagination-text').text().trim()).to.eql('11 to 20 of 100');\n      });\n\n      (0, _mocha.describe)('enable all buttons', function () {\n        (0, _mocha.it)('enables \"first page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-first-page')).prop('disabled')).to.eql(false);\n        });\n\n        (0, _mocha.it)('enables \"previous page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-previous-page')).prop('disabled')).to.eql(false);\n        });\n\n        (0, _mocha.it)('enables \"next page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-next-page')).prop('disabled')).to.eql(false);\n        });\n\n        (0, _mocha.it)('enables \"last page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-last-page')).prop('disabled')).to.eql(false);\n        });\n      });\n    });\n\n    _mocha.describe.skip('on last page', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.set('actions', {\n          onChange: function onChange() {}\n        });\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'h8ehA0Ic',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-pagination\"],null,[[\"itemsPerPage\",\"page\",\"total\",\"hook\",\"onChange\"],[10,9,100,\"myHook\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onChange\"],null]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('shows correct pagination text', function () {\n        (0, _chai.expect)(this.$('.frost-pagination-text').text().trim()).to.eql('91 to 100 of 100');\n      });\n\n      (0, _mocha.describe)('enables buttons on the left', function () {\n        (0, _mocha.it)('enables \"first page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-first-page')).prop('disabled')).to.eql(false);\n        });\n\n        (0, _mocha.it)('enables \"previous page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-previous-page')).prop('disabled')).to.eql(false);\n        });\n      });\n\n      (0, _mocha.describe)('disables buttons on the right', function () {\n        (0, _mocha.it)('disables \"next page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-next-page')).prop('disabled')).to.eql(true);\n        });\n\n        (0, _mocha.it)('disables \"last page\" button', function () {\n          (0, _chai.expect)(this.$((0, _emberHook.$hook)('myHook-last-page')).prop('disabled')).to.eql(true);\n        });\n      });\n    });\n\n    _mocha.describe.skip('fires onChange closure action', function () {\n      var onChangeSpy = undefined;\n\n      (0, _mocha.beforeEach)(function () {\n        onChangeSpy = sandbox.spy();\n        this.on('onChangeAction', onChangeSpy);\n\n        this.render(Ember.HTMLBars.template({\n          'id': 'RmM4Z/Nf',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-pagination\"],null,[[\"itemsPerPage\",\"page\",\"total\",\"hook\",\"onChange\"],[10,0,100,\"myHook\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onChangeAction\"],null]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n\n        this.$((0, _emberHook.$hook)('myHook-next-page')).trigger('click');\n      });\n\n      (0, _mocha.it)('fires onChangeSpy', function () {\n        (0, _chai.expect)(onChangeSpy.called).to.eql(true);\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/frost-list-selection-indicator-test', ['exports', 'chai', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list-selection-indicator');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    _mocha.it.skip('\"selected\" class is NOT set by default', function () {\n      this.render(Ember.HTMLBars.template({\n        'id': '9XmaUKzk',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"unknown\",[\"frost-list-selection-indicator\"]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-selection-indicator').hasClass('selected')).to.eql(false);\n    });\n\n    _mocha.it.skip('sets \"selected\" class when isSelected=true', function () {\n      this.render(Ember.HTMLBars.template({\n        'id': 'edxMEZEN',\n        'block': '{\"statements\":[[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"frost-list-selection-indicator\"],null,[[\"isSelected\"],[true]]],false],[\"text\",\"\\\\n    \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n        'meta': {}\n      }));\n\n      (0, _chai.expect)(this.$('.frost-list-selection-indicator').hasClass('selected')).to.eql(true);\n    });\n  });\n});","define('dummy/tests/integration/components/frost-list-test', ['exports', 'chai', 'ember', 'ember-data-factory-guy', 'ember-hook', 'ember-test-helpers/wait', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _ember, _emberDataFactoryGuy, _emberHook, _emberTestHelpersWait, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n  var A = _ember['default'].A;\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.integration)('frost-list', {\n    setup: function setup() {\n      (0, _emberDataFactoryGuy.manualSetup)(this.container);\n    }\n  });\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    (0, _mocha.beforeEach)(function () {\n      (0, _emberHook.initialize)();\n    });\n\n    _mocha.describe.skip('renders frost-list-item', function () {\n      (0, _mocha.beforeEach)(function () {\n        var list = A();\n        list.addObject((0, _emberDataFactoryGuy.make)('list-item'));\n\n        this.set('items', list);\n\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'FxwORLqb',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"items\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],[\"get\",[\"items\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('sets \"frost-list\" class', function () {\n        var _this = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this.$('.frost-list')).to.have.length(1);\n        });\n      });\n\n      (0, _mocha.it)('has one vertical item created', function () {\n        var _this2 = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this2.$('.vertical-item')).to.have.length(1);\n        });\n      });\n\n      (0, _mocha.it)('creates one list item', function () {\n        var _this3 = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this3.$('.frost-list-item')).to.have.length(1);\n        });\n      });\n    });\n\n    _mocha.describe.skip('renders frost-list-item from \"config\" property', function () {\n      (0, _mocha.beforeEach)(function () {\n        var list = A();\n        list.addObject((0, _emberDataFactoryGuy.make)('list-item'));\n\n        var testConfig = {\n          items: list,\n          component: 'frost-list-item',\n          expansion: {\n            onCollapseAll: 'collapseItems',\n            onExpandAll: 'expandItems'\n          },\n          selection: {\n            onSelect: 'selectItem'\n          },\n          sorting: {\n            activeSorting: [],\n            properties: [],\n            onSort: 'sortItems'\n          },\n          infiniteScroll: {\n            loadNext: 'loadNext',\n            loadPrevious: 'loadPrevious'\n          }\n        };\n\n        this.set('testConfig', testConfig);\n\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'vpG1qyxK',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"config\"],[[\"get\",[\"testConfig\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n      });\n\n      (0, _mocha.it)('sets \"frost-list\" class', function () {\n        var _this4 = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this4.$('.frost-list')).to.have.length(1);\n        });\n      });\n\n      (0, _mocha.it)('creates one vertical item', function () {\n        var _this5 = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this5.$('.vertical-item')).to.have.length(1);\n        });\n      });\n\n      (0, _mocha.it)('creates one list item', function () {\n        var _this6 = this;\n\n        return (0, _emberTestHelpersWait['default'])().then(function () {\n          (0, _chai.expect)(_this6.$('.frost-list-item')).to.have.length(1);\n        });\n      });\n    });\n\n    (0, _mocha.describe)('Supports pre selection with default itemKey', function () {\n      (0, _mocha.beforeEach)(function () {\n        var one = _ember['default'].Object.create({ isNotCompared: '0' });\n        var two = _ember['default'].Object.create({ isNotCompared: '1' });\n        var testItems = [one, two];\n        var testSelectedItems = [one];\n        this.set('items', testItems);\n        this.set('selectedItems', testSelectedItems);\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'j1G66LgJ',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"hook\",\"items\",\"selectedItems\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"get\",[\"selectedItems\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n        return (0, _emberTestHelpersWait['default'])();\n      });\n\n      (0, _mocha.it)('item 0 is selected', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n      });\n\n      (0, _mocha.it)('item 1 is not selected', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n      });\n\n      (0, _mocha.it)('selectedItems length to be 1', function () {\n        (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n      });\n    });\n\n    (0, _mocha.describe)('Supports pre selection with custom itemKey', function () {\n      (0, _mocha.beforeEach)(function () {\n        var testItems = [_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' })];\n        var testSelectedItems = [_ember['default'].Object.create({ id: '0' })];\n\n        this.set('items', testItems);\n        this.set('selectedItems', testSelectedItems);\n\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'xybXJcAI',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"hook\",\"items\",\"selectedItems\",\"itemKey\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"get\",[\"selectedItems\"]],\"id\"]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n        return (0, _emberTestHelpersWait['default'])();\n      });\n\n      (0, _mocha.it)('item 0 is selected', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n      });\n      (0, _mocha.it)('item 1 is not selected', function () {\n        (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n      });\n\n      (0, _mocha.it)('selectedItems length to be 1', function () {\n        (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n      });\n    });\n\n    (0, _mocha.describe)('When using custom itemKey', function () {\n      (0, _mocha.describe)('When Infinite', function () {\n        (0, _mocha.beforeEach)(function () {\n          var _this7 = this;\n\n          var testItems = A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' })]);\n\n          this.set('items', testItems);\n          var testSelectedItems = A([]);\n          this.set('selectedItems', testSelectedItems);\n          this.set('onSelectionChange', function (selectedItems) {\n            _this7.get('selectedItems').setObjects(selectedItems);\n          });\n          this.render(_ember['default'].HTMLBars.template({\n            'id': 'rGVHiBh1',\n            'block': '{\"statements\":[[\"text\",\"\\\\n          \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"hook\",\"items\",\"pagination\",\"selectedItems\",\"onSelectionChange\",\"itemKey\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"helper\",[\"component\"],[\"frost-list-pagination\"],[[\"page\",\"itemsPerPage\",\"total\",\"onChange\"],[0,100,100,[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"currentPage\"]]],null]],null]]]],[\"get\",[\"selectedItems\"]],[\"get\",[\"onSelectionChange\"]],\"id\"]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n            'meta': {}\n          }));\n          return (0, _emberTestHelpersWait['default'])();\n        });\n\n        (0, _mocha.describe)('Supports basic click', function () {\n          (0, _mocha.describe)('Selecting item 0', function () {\n            (0, _mocha.beforeEach)(function () {\n              $((0, _emberHook.hook)('my-list-item', { index: 0 })).click();\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 1 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 1', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n            });\n\n            (0, _mocha.describe)('Selecting previous selected item', function () {\n              (0, _mocha.beforeEach)(function () {\n                $((0, _emberHook.hook)('my-list-item', { index: 0 })).click();\n                return (0, _emberTestHelpersWait['default'])();\n              });\n\n              (0, _mocha.it)('item 0 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 1 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 0', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(0);\n              });\n            });\n          });\n\n          (0, _mocha.describe)('All items selected, then select item 0', function () {\n            (0, _mocha.beforeEach)(function () {\n              $((0, _emberHook.hook)('my-list-selection', { index: 0 })).click();\n              $((0, _emberHook.hook)('my-list-selection', { index: 1 })).click();\n              $((0, _emberHook.hook)('my-list-item', { index: 0 })).click();\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 1 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 1', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n            });\n          });\n        });\n\n        (0, _mocha.describe)('Supports specific click', function () {\n          (0, _mocha.describe)('Selecting item 0', function () {\n            (0, _mocha.beforeEach)(function () {\n              (0, _emberHook.$hook)('my-list-selection', { index: 0 }).click();\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n            });\n            (0, _mocha.it)('item 1 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 1', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n            });\n\n            (0, _mocha.describe)('Unselecting item 1', function () {\n              (0, _mocha.beforeEach)(function () {\n                (0, _emberHook.$hook)('my-list-selection', { index: 0 }).click();\n                return (0, _emberTestHelpersWait['default'])();\n              });\n\n              (0, _mocha.it)('item 0 is not selected', function () {\n                (0, _chai.expect)($((0, _emberHook.$hook)('my-list-item-container', { index: 0 })).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 1 is not selected', function () {\n                (0, _chai.expect)($((0, _emberHook.$hook)('my-list-item-container', { index: 1 })).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 0', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(0);\n              });\n            });\n          });\n\n          (0, _mocha.describe)('Selecting every item', function () {\n            (0, _mocha.beforeEach)(function () {\n              (0, _emberHook.$hook)('my-list-selection', { index: 0 }).click();\n              (0, _emberHook.$hook)('my-list-selection', { index: 1 }).click();\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 1 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 2', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(2);\n            });\n\n            (0, _mocha.describe)('Unselect each item', function () {\n              (0, _mocha.beforeEach)(function () {\n                (0, _emberHook.$hook)('my-list-selection', { index: 0 }).click();\n                (0, _emberHook.$hook)('my-list-selection', { index: 1 }).click();\n                return (0, _emberTestHelpersWait['default'])();\n              });\n\n              (0, _mocha.it)('item 0 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 1 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 0', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(0);\n              });\n            });\n          });\n        });\n\n        (0, _mocha.describe)('Supports ranged base clicks', function () {\n          (0, _mocha.beforeEach)(function () {\n            var testItems = A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' }), _ember['default'].Object.create({ id: '2' }), _ember['default'].Object.create({ id: '3' }), _ember['default'].Object.create({ id: '4' }), _ember['default'].Object.create({ id: '5' }), _ember['default'].Object.create({ id: '6' })]);\n            this.set('items', testItems);\n            return (0, _emberTestHelpersWait['default'])();\n          });\n\n          (0, _mocha.describe)('When using shift click from item1-5', function () {\n            (0, _mocha.beforeEach)(function () {\n              var clickEvent = $.Event('click');\n              clickEvent.shiftKey = true;\n              var clickEvent2 = $.Event('click');\n              clickEvent2.shiftKey = true;\n              $((0, _emberHook.hook)('my-list-item', { index: 1 })).trigger(clickEvent);\n              $((0, _emberHook.hook)('my-list-item', { index: 5 })).trigger(clickEvent2);\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 1 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 2 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 3 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 4 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 5 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 6 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 5', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(5);\n            });\n          });\n\n          (0, _mocha.describe)('When using shift click on item 1', function () {\n            (0, _mocha.beforeEach)(function () {\n              var clickEvent = $.Event('click');\n              clickEvent.shiftKey = true;\n              $((0, _emberHook.hook)('my-list-item', { index: 1 })).trigger(clickEvent);\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 1 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 2 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 3 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 4 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 5 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 6 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 1', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n            });\n\n            (0, _mocha.describe)('When using shift click on item 3', function () {\n              (0, _mocha.beforeEach)(function () {\n                var clickEvent = $.Event('click');\n                clickEvent.shiftKey = true;\n                $((0, _emberHook.hook)('my-list-item', { index: 3 })).trigger(clickEvent);\n                return (0, _emberTestHelpersWait['default'])();\n              });\n\n              (0, _mocha.it)('item 0 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 1 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 2 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 3 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 4 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 5 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('item 6 is not selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 3', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(3);\n              });\n\n              (0, _mocha.describe)('When using shift click on item 5', function () {\n                (0, _mocha.beforeEach)(function () {\n                  var clickEvent = $.Event('click');\n                  clickEvent.shiftKey = true;\n                  $((0, _emberHook.hook)('my-list-item', { index: 5 })).trigger(clickEvent);\n                  return (0, _emberTestHelpersWait['default'])();\n                });\n\n                (0, _mocha.it)('item 0 is not selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n                });\n\n                (0, _mocha.it)('item 1 is selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n                });\n\n                (0, _mocha.it)('item 2 is selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n                });\n\n                (0, _mocha.it)('item 3 is selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(true);\n                });\n\n                (0, _mocha.it)('item 4 is selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(true);\n                });\n\n                (0, _mocha.it)('item 5 is selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(true);\n                });\n\n                (0, _mocha.it)('item 6 is not selected', function () {\n                  (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n                });\n\n                (0, _mocha.it)('selectedItems length to be 5', function () {\n                  (0, _chai.expect)(this.get('selectedItems').length).to.eql(5);\n                });\n\n                (0, _mocha.describe)('When using shift click on item 1', function () {\n                  (0, _mocha.beforeEach)(function () {\n                    var clickEvent = $.Event('click');\n                    clickEvent.shiftKey = true;\n                    $((0, _emberHook.hook)('my-list-item', { index: 1 })).trigger(clickEvent);\n                    return (0, _emberTestHelpersWait['default'])();\n                  });\n\n                  (0, _mocha.it)('item 0 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 1 is selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n                  });\n\n                  (0, _mocha.it)('item 2 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 3 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 4 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 5 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 6 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('selectedItems length to be 1', function () {\n                    (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n                  });\n                });\n\n                (0, _mocha.describe)('When using shift click on item 0', function () {\n                  (0, _mocha.beforeEach)(function () {\n                    var clickEvent = $.Event('click');\n                    clickEvent.shiftKey = true;\n                    $((0, _emberHook.hook)('my-list-item', { index: 0 })).trigger(clickEvent);\n                    return (0, _emberTestHelpersWait['default'])();\n                  });\n\n                  (0, _mocha.it)('item 0 is selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n                  });\n\n                  (0, _mocha.it)('item 1 is selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n                  });\n\n                  (0, _mocha.it)('item 2 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 3 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 4 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 5 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('item 6 is not selected', function () {\n                    (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n                  });\n\n                  (0, _mocha.it)('selectedItems length to be 2', function () {\n                    (0, _chai.expect)(this.get('selectedItems').length).to.eql(2);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n\n      (0, _mocha.describe)('When Paged', function () {\n        (0, _mocha.beforeEach)(function () {\n          var _this8 = this;\n\n          // Note: DON'T change the seeding, the object creation/destruction is intentional\n          // to prove that comparison of selected items only via key works!\n          var testItems = A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' }), _ember['default'].Object.create({ id: '2' })]);\n          this.set('actions', {\n            onChange: function onChange(page) {\n              this.set('page', page);\n              if (page === 0) {\n                this.set('items', A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' }), _ember['default'].Object.create({ id: '2' })]));\n              } else if (page === 1) {\n                this.set('items', A([_ember['default'].Object.create({ id: '3' }), _ember['default'].Object.create({ id: '4' }), _ember['default'].Object.create({ id: '5' })]));\n              }\n            }\n          });\n          this.set('items', testItems);\n          var testSelectedItems = A([]);\n          this.set('selectedItems', testSelectedItems);\n          this.set('onSelectionChange', function (selectedItems) {\n            _this8.get('selectedItems').setObjects(selectedItems);\n          });\n          this.set('page', 0);\n          this.render(_ember['default'].HTMLBars.template({\n            'id': 'f9PTb0rN',\n            'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"hook\",\"items\",\"selectedItems\",\"onSelectionChange\",\"itemKey\",\"pagination\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"get\",[\"selectedItems\"]],[\"get\",[\"onSelectionChange\"]],\"id\",[\"helper\",[\"component\"],[\"frost-list-pagination\"],[[\"itemsPerPage\",\"onChange\",\"page\",\"total\"],[3,[\"helper\",[\"action\"],[[\"get\",[null]],\"onChange\"],null],[\"get\",[\"page\"]],6]]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n            'meta': {}\n          }));\n          return (0, _emberTestHelpersWait['default'])();\n        });\n\n        (0, _mocha.it)('display proper pagination 1 to 3 of 6', function () {\n          (0, _chai.expect)($('.frost-list-pagination-text').text().trim()).to.eql('1 to 3 of 6');\n        });\n\n        (0, _mocha.describe)('When shift selecting item1-3', function () {\n          (0, _mocha.beforeEach)(function () {\n            var clickEvent = $.Event('click');\n            clickEvent.shiftKey = true;\n            var clickEvent2 = $.Event('click');\n            clickEvent2.shiftKey = true;\n            $((0, _emberHook.hook)('my-list-item', { index: 0 })).trigger(clickEvent);\n            $((0, _emberHook.hook)('my-list-item', { index: 2 })).trigger(clickEvent2);\n            return (0, _emberTestHelpersWait['default'])();\n          });\n\n          (0, _mocha.it)('item 0 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 1 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 2 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('selectedItems length to be 3', function () {\n            (0, _chai.expect)(this.get('selectedItems').length).to.eql(3);\n          });\n\n          (0, _mocha.describe)('When clicking next page', function () {\n            (0, _mocha.beforeEach)(function () {\n              $((0, _emberHook.hook)('my-list-pagination-next-page')).click();\n              return (0, _emberTestHelpersWait['default'])();\n            });\n\n            (0, _mocha.it)('item 0 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 1 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('item 2 is not selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(false);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 3', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(3);\n            });\n\n            (0, _mocha.it)('display proper pagination 4 to 6 of 6', function () {\n              (0, _chai.expect)($('.frost-list-pagination-text').text().trim()).to.eql('4 to 6 of 6');\n            });\n\n            (0, _mocha.describe)('When shift click item4-6', function () {\n              (0, _mocha.beforeEach)(function () {\n                var clickEvent = $.Event('click');\n                clickEvent.shiftKey = true;\n                var clickEvent2 = $.Event('click');\n                clickEvent2.shiftKey = true;\n                $((0, _emberHook.hook)('my-list-item', { index: 0 })).trigger(clickEvent);\n                $((0, _emberHook.hook)('my-list-item', { index: 2 })).trigger(clickEvent2);\n                return (0, _emberTestHelpersWait['default'])();\n              });\n              (0, _mocha.it)('item 0 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 1 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 2 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 6', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(6);\n              });\n            });\n          });\n        });\n\n        (0, _mocha.describe)('When using specific select on item 2', function () {\n          (0, _mocha.beforeEach)(function () {\n            (0, _emberHook.$hook)('my-list-selection', { index: 1 }).click();\n            return (0, _emberTestHelpersWait['default'])();\n          });\n\n          (0, _mocha.it)('item 0 is not selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n          });\n\n          (0, _mocha.it)('item 1 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 2 is not selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(false);\n          });\n\n          (0, _mocha.it)('selectedItems length to be 1', function () {\n            (0, _chai.expect)(this.get('selectedItems').length).to.eql(1);\n          });\n\n          (0, _mocha.describe)('When switching to page 2 and shift click item4-6', function () {\n            (0, _mocha.beforeEach)(function () {\n              $((0, _emberHook.hook)('my-list-pagination-next-page')).click();\n              return (0, _emberTestHelpersWait['default'])().then(function () {\n                var clickEvent = $.Event('click');\n                clickEvent.shiftKey = true;\n                var clickEvent2 = $.Event('click');\n                clickEvent2.shiftKey = true;\n                $((0, _emberHook.hook)('my-list-item', { index: 0 })).trigger(clickEvent);\n                $((0, _emberHook.hook)('my-list-item', { index: 2 })).trigger(clickEvent2);\n                return (0, _emberTestHelpersWait['default'])();\n              });\n            });\n\n            (0, _mocha.it)('item 0 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 1 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('item 2 is selected', function () {\n              (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n            });\n\n            (0, _mocha.it)('selectedItems length to be 4', function () {\n              (0, _chai.expect)(this.get('selectedItems').length).to.eql(4);\n            });\n\n            (0, _mocha.describe)('When switching to page 1 and shift click item1-3', function () {\n              (0, _mocha.beforeEach)(function () {\n                $((0, _emberHook.hook)('my-list-pagination-previous-page')).click();\n                return (0, _emberTestHelpersWait['default'])().then(function () {\n                  var clickEvent = $.Event('click');\n                  clickEvent.shiftKey = true;\n                  var clickEvent2 = $.Event('click');\n                  clickEvent2.shiftKey = true;\n                  $((0, _emberHook.hook)('my-list-item', { index: 0 })).trigger(clickEvent);\n                  $((0, _emberHook.hook)('my-list-item', { index: 2 })).trigger(clickEvent2);\n                  return (0, _emberTestHelpersWait['default'])();\n                });\n              });\n\n              (0, _mocha.it)('item 0 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 1 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('item 2 is selected', function () {\n                (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n              });\n\n              (0, _mocha.it)('selectedItems length to be 6', function () {\n                (0, _chai.expect)(this.get('selectedItems').length).to.eql(6);\n              });\n            });\n          });\n        });\n      });\n    });\n\n    (0, _mocha.describe)('When using default itemKey', function () {\n      (0, _mocha.beforeEach)(function () {\n        var _this9 = this;\n\n        var testItems = A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' }), _ember['default'].Object.create({ id: '2' }), _ember['default'].Object.create({ id: '3' }), _ember['default'].Object.create({ id: '4' }), _ember['default'].Object.create({ id: '5' }), _ember['default'].Object.create({ id: '6' })]);\n        this.set('items', testItems);\n        var testSelectedItems = A([]);\n        this.set('selectedItems', testSelectedItems);\n        this.set('onSelectionChange', function (selectedItems) {\n          _this9.get('selectedItems').setObjects(selectedItems);\n        });\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'BhloIHfs',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"hook\",\"items\",\"selectedItems\",\"onSelectionChange\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"get\",[\"selectedItems\"]],[\"get\",[\"onSelectionChange\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n        return (0, _emberTestHelpersWait['default'])();\n      });\n\n      (0, _mocha.describe)('Supports ranged based clicks', function () {\n        (0, _mocha.describe)('When using shift click from item1-5', function () {\n          (0, _mocha.beforeEach)(function () {\n            var clickEvent = $.Event('click');\n            clickEvent.shiftKey = true;\n            var clickEvent2 = $.Event('click');\n            clickEvent2.shiftKey = true;\n            $((0, _emberHook.hook)('my-list-item', { index: 1 })).trigger(clickEvent);\n            $((0, _emberHook.hook)('my-list-item', { index: 5 })).trigger(clickEvent2);\n            return (0, _emberTestHelpersWait['default'])();\n          });\n\n          (0, _mocha.it)('item 0 is not selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 0 }).hasClass('is-selected')).to.eql(false);\n          });\n\n          (0, _mocha.it)('item 1 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 1 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 2 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 2 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 3 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 3 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 4 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 4 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 5 is selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 5 }).hasClass('is-selected')).to.eql(true);\n          });\n\n          (0, _mocha.it)('item 6 is not selected', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-container', { index: 6 }).hasClass('is-selected')).to.eql(false);\n          });\n\n          (0, _mocha.it)('selectedItems length to be 5', function () {\n            (0, _chai.expect)(this.get('selectedItems').length).to.eql(5);\n          });\n        });\n      });\n    });\n\n    (0, _mocha.describe)('Supports item expansion', function () {\n      (0, _mocha.beforeEach)(function () {\n        var _this10 = this;\n\n        var testItems = A([_ember['default'].Object.create({ id: '0' }), _ember['default'].Object.create({ id: '1' })]);\n        this.set('items', testItems);\n        this.set('selectedItems', A([]));\n        this.set('expandedItems', A([]));\n        this.set('onSelectionChange', function (selectedItems) {\n          _this10.get('selectedItems').setObjects(selectedItems);\n        });\n        this.set('onExpansionChange', function (expandedItems) {\n          _this10.get('expandedItems').setObjects(expandedItems);\n        });\n        this.render(_ember['default'].HTMLBars.template({\n          'id': 'l4EBqaKg',\n          'block': '{\"statements\":[[\"text\",\"\\\\n        \"],[\"append\",[\"helper\",[\"frost-list\"],null,[[\"item\",\"itemExpansion\",\"hook\",\"items\",\"selectedItems\",\"onSelectionChange\",\"onExpansionChange\",\"expandedItems\"],[[\"helper\",[\"component\"],[\"frost-list-item\"],null],[\"helper\",[\"component\"],[\"frost-list-item\"],null],\"my-list\",[\"get\",[\"items\"]],[\"get\",[\"selectedItems\"]],[\"get\",[\"onSelectionChange\"]],[\"get\",[\"onExpansionChange\"]],[\"get\",[\"expandedItems\"]]]]],false],[\"text\",\"\\\\n      \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n          'meta': {}\n        }));\n        return (0, _emberTestHelpersWait['default'])();\n      });\n\n      (0, _mocha.describe)('clicking item 0 expansion button', function () {\n        (0, _mocha.beforeEach)(function () {\n          (0, _emberHook.$hook)('my-list-expansion', { index: 0 }).click();\n          return (0, _emberTestHelpersWait['default'])();\n        });\n\n        (0, _mocha.it)('item 0 is expanded', function () {\n          (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-expansion', { index: 0 })).to.have.length(1);\n        });\n\n        (0, _mocha.describe)('clicking item 0 expansion button', function () {\n          (0, _mocha.beforeEach)(function () {\n            (0, _emberHook.$hook)('my-list-expansion', { index: 0 }).click();\n            return (0, _emberTestHelpersWait['default'])();\n          });\n          (0, _mocha.it)('item 0 is not expanded', function () {\n            (0, _chai.expect)((0, _emberHook.$hook)('my-list-item-expansion', { index: 0 })).to.have.length(0);\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-mocha'], function (exports, _dummyTestsHelpersResolver, _emberMocha) {\n\n  (0, _emberMocha.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/unit/components/frost-list-core-test', ['exports', 'chai', 'ember', 'ember-prop-types', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _ember, _emberPropTypes, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n  var A = _ember['default'].A;\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-list-core');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined,\n        sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    _mocha.it.skip('includes className frost-list', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-list');\n    });\n\n    _mocha.it.skip('includes className frost-list-core', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-list-core');\n    });\n\n    _mocha.describe.skip('default property values', function () {\n      (0, _mocha.it)('sets alwaysUseDefaultHeight to false', function () {\n        (0, _chai.expect)(component.get('alwaysUseDefaultHeight')).to.eql(false);\n      });\n\n      (0, _mocha.it)('sets idForFirstItem to null', function () {\n        (0, _chai.expect)(component.get('idForFirstItem')).to.eql(null);\n      });\n\n      (0, _mocha.it)('sets key to @identity', function () {\n        (0, _chai.expect)(component.get('key')).to.eql('@identity');\n      });\n\n      (0, _mocha.it)('sets scrollPosition to 0', function () {\n        (0, _chai.expect)(component.get('scrollPosition')).to.eql(0);\n      });\n    });\n\n    _mocha.it.skip('sets dependent keys correctly', function () {\n      var _recordsDependentKeys = ['items.[]'];\n\n      var _hasHeaderDependentKeys = ['expansion', 'pagination', 'sorting'];\n\n      (0, _mocha.it)('sets correct dependent keys for _records computed property', function () {\n        (0, _chai.expect)(component._records._dependentKeys).to.eql(_recordsDependentKeys);\n      });\n      (0, _mocha.it)('sets correct dependent keys for _hasHeader computed property', function () {\n        (0, _chai.expect)(component._hasHeader._dependentKeys).to.eql(_hasHeaderDependentKeys);\n      });\n    });\n\n    _mocha.it.skip('has the expected Mixins', function () {\n      (0, _chai.expect)(_emberPropTypes['default'].detect(component)).to.eql(true);\n    });\n\n    _mocha.describe.skip('\"_records\" computed property', function () {\n      (0, _mocha.it)('is set correctly when items is not empty', function () {\n        component.set('items', A([1, 2, 3, 4]));\n\n        (0, _chai.expect)(component.get('_records')).to.eql(A([1, 2, 3, 4]));\n      });\n\n      (0, _mocha.it)('is set correctly when items is empty', function () {\n        component.set('items', undefined);\n\n        (0, _chai.expect)(component.get('_records')).to.eql([]);\n      });\n    });\n\n    _mocha.describe.skip('\"_hasHeader\" computed property', function () {\n      (0, _mocha.it)('is set to \"true\" when \"sorting\" and \"expansion\" are set', function () {\n        var sorting = { sortProperty: 'sortProperty' };\n        var expansion = { expansion: 'expansionMethod' };\n\n        component.setProperties({ sorting: sorting, expansion: expansion });\n\n        (0, _chai.expect)(component.get('_hasHeader')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to \"true\" when \"sorting\" is set', function () {\n        var sorting = { sortProperty: 'sortProperty' };\n\n        component.set('sorting', sorting);\n\n        (0, _chai.expect)(component.get('_hasHeader')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to \"true\" when \"expansion\" is set', function () {\n        var expansion = { expansion: 'expansionMethod' };\n\n        component.set('expansion', expansion);\n\n        (0, _chai.expect)(component.get('_hasHeader')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to \"false\" when \"sorting\" and \"expansion\" are NOT set', function () {\n        (0, _chai.expect)(component.get('_hasHeader')).to.eql(false);\n      });\n    });\n\n    _mocha.describe.skip('\"checkExpansionValidity\" function', function () {\n      (0, _mocha.it)('returns \"true\" when expansion is set properly', function () {\n        var expansion = {\n          onCollapseAll: function onCollapseAll() {},\n          onExpandAll: function onExpandAll() {}\n        };\n\n        (0, _chai.expect)(component.checkExpansionValidity(expansion)).to.eql(true);\n      });\n\n      (0, _mocha.it)('returns \"false\" when \"onExpandAll\" function is missing in \"expansion\"', function () {\n        var expansion = {\n          onExpandAll: function onExpandAll() {}\n        };\n\n        (0, _chai.expect)(component.checkExpansionValidity(expansion)).to.eql(false);\n      });\n\n      (0, _mocha.it)('returns \"false\" when \"onCollapseAll\" function is missing in \"expansion\"', function () {\n        var expansion = {\n          onCollapseAll: function onCollapseAll() {}\n        };\n\n        (0, _chai.expect)(component.checkExpansionValidity(expansion)).to.eql(false);\n      });\n    });\n\n    _mocha.describe.skip('\"checkSelectionValidity\" function', function () {\n      (0, _mocha.it)('returns \"true\" when \"selection\" is set Properly', function () {\n        var selection = {\n          onSelect: function onSelect() {}\n        };\n\n        (0, _chai.expect)(component.checkSelectionValidity(selection)).to.eql(true);\n      });\n\n      (0, _mocha.it)('returns \"false\" when \"onSelect\" function is missing in \"selection\"', function () {\n        var selection = {};\n\n        (0, _chai.expect)(component.checkSelectionValidity(selection)).to.eql(false);\n      });\n    });\n\n    _mocha.describe.skip('\"checkSortingValidity\" function', function () {\n      (0, _mocha.it)('returns \"false\" when \"sorting\" is NOT set properly', function () {\n        var sorting = {};\n\n        (0, _chai.expect)(component.checkSortingValidity(sorting)).to.eql(false);\n      });\n\n      (0, _mocha.it)('returns \"false\" when \"activeSorting\" and \"properties\" are missing in \"sorting\"', function () {\n        var sorting = {\n          onSort: function onSort() {}\n        };\n\n        (0, _chai.expect)(component.checkSortingValidity(sorting)).to.eql(false);\n      });\n\n      (0, _mocha.it)('returns \"false\" when \"activeSorting\" is missing in \"sorting\"', function () {\n        var sorting = {\n          onSort: function onSort() {},\n          properties: []\n        };\n\n        (0, _chai.expect)(component.checkSortingValidity(sorting)).to.eql(false);\n      });\n\n      (0, _mocha.it)('returns \"true\" when \"sorting\" is set properly', function () {\n        var sorting = {\n          onSort: function onSort() {},\n          properties: [],\n          activeSorting: []\n        };\n\n        (0, _chai.expect)(component.checkSortingValidity(sorting)).to.eql(true);\n      });\n    });\n\n    _mocha.describe.skip('\"_findElementsInBetween\" function', function () {\n      var array = [];\n      (0, _mocha.beforeEach)(function () {\n        for (var i = 0; i < 10; i++) {\n          array.push({\n            id: i\n          });\n        }\n      });\n\n      (0, _mocha.it)('returns result array when all attributes are provided', function () {\n        (0, _chai.expect)(component._findElementsInBetween(array, array[2], array[6]).length).to.eql(5);\n      });\n\n      (0, _mocha.describe)('returns last element when \"firstElement\" is missing', function () {\n        (0, _mocha.it)('returns only one element', function () {\n          var result = component._findElementsInBetween(array, undefined, array[6]);\n          (0, _chai.expect)(result.length).to.eql(1);\n        });\n\n        (0, _mocha.it)('returns the last element id', function () {\n          var result = component._findElementsInBetween(array, undefined, array[6]);\n          (0, _chai.expect)(result[0].id).to.eql(6);\n        });\n      });\n    });\n\n    _mocha.describe.skip('\"selectItem\" action', function () {\n      var testItems = A([{\n        id: '1'\n      }, {\n        id: '2'\n      }, {\n        id: '3'\n      }]);\n\n      (0, _mocha.it)('updates persistedClickState with correct object', function () {\n        var persistedClickState = {\n          clickedRecord: {\n            id: '1'\n          },\n          isSelected: true\n        };\n\n        var updatedPersistedClickState = {\n          clickedRecord: {\n            id: '3'\n          },\n          isSelected: true\n        };\n        var mockAttrs = {\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false\n          },\n          record: {\n            id: '3'\n          }\n        };\n\n        component.set('persistedClickState', persistedClickState);\n        component.send('selectItem', {}, mockAttrs);\n\n        (0, _chai.expect)(component.get('persistedClickState')).to.eql(updatedPersistedClickState);\n      });\n\n      (0, _mocha.it)('triggers shiftKey selection', function () {\n        var mockEvent = {\n          shiftKey: true\n        };\n\n        var mockAttrs = {\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false\n          },\n          record: {\n            id: '3'\n          }\n        };\n\n        var mockPersistedClickState = {\n          isSelected: true,\n          clickedRecord: {\n            id: '1'\n          }\n        };\n        var resultObject = {\n          records: A([{\n            id: '1'\n          }, {\n            id: '2'\n          }, {\n            id: '3'\n          }]),\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false,\n            isShiftSelect: true\n          }\n        };\n\n        component.setProperties({\n          'onSelect': sandbox.spy(),\n          '_records': testItems,\n          'persistedClickState': mockPersistedClickState\n        });\n        component.send('selectItem', mockEvent, mockAttrs);\n\n        (0, _chai.expect)(component.get('onSelect').calledWith(resultObject), 'calls onSelect() with the correct object').to.eql(true);\n      });\n\n      (0, _mocha.it)('triggers command/control key selection', function () {\n        var mockEvent = {\n          shiftKey: false,\n          ctrlKey: true\n        };\n\n        var mockAttrs = {\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false\n          },\n          record: {\n            id: '3'\n          }\n        };\n\n        var mockPersistedClickState = {\n          isSelected: true,\n          clickedRecord: {\n            id: '1'\n          }\n        };\n        var resultObject = {\n          records: A([{\n            id: '3'\n          }]),\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false,\n            isShiftSelect: false,\n            isCtrlSelect: true\n          }\n        };\n\n        component.setProperties({\n          'onSelect': sandbox.spy(),\n          '_records': testItems,\n          'persistedClickState': mockPersistedClickState\n        });\n        component.send('selectItem', mockEvent, mockAttrs);\n\n        (0, _chai.expect)(component.get('onSelect').calledWith(resultObject), 'calls onSelect() with the correct object').to.eql(true);\n      });\n\n      (0, _mocha.it)('triggers single item selection', function () {\n        var mockEvent = {\n          shiftKey: false\n        };\n\n        var mockAttrs = {\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false\n          },\n          record: {\n            id: '1'\n          }\n        };\n\n        var resultObject = {\n          records: A([{\n            id: '1'\n          }]),\n          selectDesc: {\n            isSelected: true,\n            isTargetSelectionIndicator: false,\n            isShiftSelect: false\n          }\n        };\n\n        component.setProperties({\n          'onSelect': sandbox.spy(),\n          '_records': testItems\n        });\n        component.send('selectItem', mockEvent, mockAttrs);\n\n        (0, _chai.expect)(component.get('onSelect').calledWith(resultObject), 'calls onSelect() with the correct object').to.eql(true);\n      });\n    });\n  });\n});","define('dummy/tests/unit/components/frost-list-expansion-test', ['exports', 'chai', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-list-expansion');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n    });\n\n    _mocha.it.skip('includes className frost-list-expansion', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-list-expansion');\n    });\n  });\n});","define('dummy/tests/unit/components/frost-list-item-test', ['exports', 'chai', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-list-item');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n    });\n\n    _mocha.it.skip('includes className frost-list-item', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-list-item');\n    });\n\n    _mocha.describe.skip('dependent keys', function () {\n      var isSelectedDependentKeys = undefined,\n          isExpandedDependentKeys = undefined;\n      (0, _mocha.beforeEach)(function () {\n        isSelectedDependentKeys = ['model.isSelected'];\n\n        isExpandedDependentKeys = ['model.isExpanded'];\n      });\n      (0, _mocha.it)('sets correct dependent keys for isSelected computed property', function () {\n        (0, _chai.expect)(component.isSelected._dependentKeys).to.eql(isSelectedDependentKeys);\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for isExpanded computed property', function () {\n        (0, _chai.expect)(component.isExpanded._dependentKeys).to.eql(isExpandedDependentKeys);\n      });\n    });\n\n    _mocha.it.skip('\"isExpanded\" computed property', function () {\n      component.set('model', { isExpanded: true });\n\n      (0, _chai.expect)(component.get('isExpanded')).to.eql(true);\n    });\n\n    _mocha.it.skip('\"isSelected\" computed property', function () {\n      component.set('model', { isSelected: true });\n\n      (0, _chai.expect)(component.get('isSelected')).to.eql(true);\n    });\n  });\n});","define('dummy/tests/unit/components/frost-list-selection-indicator-test', ['exports', 'chai', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-list-selection-indicator');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n    });\n\n    _mocha.it.skip('includes className frost-list-selection-indicator', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-list-selection-indicator');\n    });\n  });\n});","define('dummy/tests/unit/components/frost-list-test', ['exports', 'chai', 'ember', 'ember-prop-types', 'mocha', 'sinon', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _ember, _emberPropTypes, _mocha, _sinon, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n  var Logger = _ember['default'].Logger;\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-list');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined,\n        sandbox = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n      sandbox = _sinon['default'].sandbox.create();\n    });\n\n    (0, _mocha.afterEach)(function () {\n      sandbox.restore();\n    });\n\n    _mocha.it.skip('sets default properties value correctly', function () {\n      (0, _chai.expect)(component.get('alwaysUseDefaultHeight')).to.eql(false);\n    });\n\n    _mocha.it.skip('has the expected Mixins', function () {\n      (0, _chai.expect)(_emberPropTypes['default'].detect(component)).to.eql(true);\n    });\n\n    _mocha.describe.skip('InitContext()', function () {\n      (0, _mocha.it)('errors when config is set with item', function () {\n        var EmberLoggerSpy = sandbox.spy(Logger, 'error');\n\n        component.setProperties({\n          'config': {},\n          'item': {}\n        });\n        component.initContext();\n\n        (0, _chai.expect)(EmberLoggerSpy.called).to.eql(true);\n      });\n\n      (0, _mocha.it)('errors when config is set with expansion', function () {\n        var EmberLoggerSpy = sandbox.spy(Logger, 'error');\n\n        component.setProperties({\n          'config': {},\n          'expansion': {}\n        });\n        component.initContext();\n\n        (0, _chai.expect)(EmberLoggerSpy.called).to.eql(true);\n      });\n\n      (0, _mocha.it)('errors when config is set with sorting', function () {\n        var EmberLoggerSpy = sandbox.spy(Logger, 'error');\n\n        component.setProperties({\n          'config': {},\n          'sorting': {}\n        });\n        component.initContext();\n\n        (0, _chai.expect)(EmberLoggerSpy.called).to.eql(true);\n      });\n\n      (0, _mocha.it)('does not error when config is set by itself', function () {\n        var EmberLoggerSpy = sandbox.spy(Logger, 'error');\n\n        component.set('config', {});\n        component.initContext();\n\n        (0, _chai.expect)(EmberLoggerSpy.called).to.eql(false);\n      });\n    });\n  });\n});","define('dummy/tests/unit/components/frost-pagination-test', ['exports', 'chai', 'ember-prop-types', 'mocha', 'dummy/tests/helpers/ember-test-utils/setup-component-test'], function (exports, _chai, _emberPropTypes, _mocha, _dummyTestsHelpersEmberTestUtilsSetupComponentTest) {\n\n  var test = (0, _dummyTestsHelpersEmberTestUtilsSetupComponentTest.unit)('frost-pagination');\n  (0, _mocha.describe)(test.label, function () {\n    test.setup();\n\n    var component = undefined;\n\n    (0, _mocha.beforeEach)(function () {\n      component = this.subject();\n    });\n\n    _mocha.it.skip('includes className frost-pagination', function () {\n      (0, _chai.expect)(component.classNames).to.include('frost-pagination');\n    });\n\n    _mocha.describe.skip('dependent keys', function () {\n      var _endDependentKeys = undefined,\n          _isLeftDisabledDependentKeys = undefined,\n          _isRightDisabledDependentKeys = undefined,\n          _offsetDependentKeys = undefined,\n          _paginationTextDependentKeys = undefined;\n\n      (0, _mocha.beforeEach)(function () {\n        _endDependentKeys = ['itemsPerPage', 'page', 'total'];\n\n        _isLeftDisabledDependentKeys = ['page'];\n\n        _isRightDisabledDependentKeys = ['itemsPerPage', 'page', 'total'];\n\n        _offsetDependentKeys = ['itemsPerPage', 'page', 'total'];\n\n        _paginationTextDependentKeys = ['_offset', '_end', 'total'];\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for _end computed property', function () {\n        (0, _chai.expect)(component._end._dependentKeys).to.eql(_endDependentKeys);\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for _isLeftDisabled computed property', function () {\n        (0, _chai.expect)(component._isLeftDisabled._dependentKeys).to.eql(_isLeftDisabledDependentKeys);\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for _isRightDisabled computed property', function () {\n        (0, _chai.expect)(component._isRightDisabled._dependentKeys).to.eql(_isRightDisabledDependentKeys);\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for _offset computed property', function () {\n        (0, _chai.expect)(component._offset._dependentKeys).to.eql(_offsetDependentKeys);\n      });\n\n      (0, _mocha.it)('sets correct dependent keys for _paginationText computed property', function () {\n        (0, _chai.expect)(component._paginationText._dependentKeys).to.eql(_paginationTextDependentKeys);\n      });\n    });\n\n    _mocha.it.skip('has the expected Mixins', function () {\n      (0, _chai.expect)(_emberPropTypes['default'].detect(component)).to.eql(true);\n    });\n\n    _mocha.describe.skip('_end computed property', function () {\n      (0, _mocha.it)('is set to pageMax when NOT on the last page', function () {\n        var itemsPerPage = 10;\n        var page = 5;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n\n        // on page 5 would be item 51 to 60 so _end is 60\n        (0, _chai.expect)(component.get('_end')).to.eql(60);\n      });\n\n      (0, _mocha.it)('is set to total on the last page', function () {\n        var itemsPerPage = 10;\n        var page = 9;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n        var expectedResult = component.get('total');\n\n        (0, _chai.expect)(component.get('_end')).to.eql(expectedResult);\n      });\n    });\n\n    _mocha.describe.skip('_isLeftDisabled computed property', function () {\n      (0, _mocha.it)('is set to true on the first page', function () {\n        component.set('page', 0);\n\n        (0, _chai.expect)(component.get('_isLeftDisabled')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to false when NOT on the first page', function () {\n        component.set('page', 5);\n\n        (0, _chai.expect)(component.get('_isLeftDisabled')).to.eql(false);\n      });\n    });\n\n    _mocha.describe.skip('_isRightDisabled computed property', function () {\n      (0, _mocha.it)('is set to true when total is equal to 0', function () {\n        component.set('total', 0);\n\n        (0, _chai.expect)(component.get('_isRightDisabled')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to true on the last page', function () {\n        var itemsPerPage = 10;\n        var page = 9;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n\n        (0, _chai.expect)(component.get('_isRightDisabled')).to.eql(true);\n      });\n\n      (0, _mocha.it)('is set to false when NOT on the last page', function () {\n        var itemsPerPage = 10;\n        var page = 5;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n\n        (0, _chai.expect)(component.get('_isRightDisabled')).to.eql(false);\n      });\n    });\n\n    _mocha.describe.skip('_offset computed property', function () {\n      (0, _mocha.it)('is set to 0 when total is equal to 0', function () {\n        component.set('total', 0);\n\n        (0, _chai.expect)(component.get('_offset')).to.eql(0);\n      });\n\n      (0, _mocha.it)('is set to correct offset of that page', function () {\n        var itemsPerPage = 10;\n        var page = 2;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n\n        // on page 2 would be item 21 to 30 so _offset is 21\n        (0, _chai.expect)(component.get('_offset')).to.eql(21);\n      });\n    });\n\n    _mocha.describe.skip('_paginationText computed property', function () {\n      (0, _mocha.it)('is set to \"0 results found\" when total is equal to 0', function () {\n        component.set('total', 0);\n\n        (0, _chai.expect)(component.get('_paginationText')).to.eql('0 results found');\n      });\n\n      (0, _mocha.it)('is set to \"1 to 10 of 100\" on the first page', function () {\n        var itemsPerPage = 10;\n        var page = 0;\n        var total = 100;\n\n        component.setProperties({ itemsPerPage: itemsPerPage, page: page, total: total });\n\n        (0, _chai.expect)(component.get('_paginationText')).to.eql('1 to 10 of 100');\n      });\n    });\n  });\n});","define('dummy/tests/unit/helpers/floor-test', ['exports', 'chai', 'ember-frost-list/helpers/floor', 'mocha'], function (exports, _chai, _emberFrostListHelpersFloor, _mocha) {\n\n  _mocha.describe.skip('Unit / Helper / floor', function () {\n    (0, _mocha.it)('works for positive numbers', function () {\n      var result = (0, _emberFrostListHelpersFloor.floor)([42.8]);\n      (0, _chai.expect)(result).to.equal(42);\n    });\n\n    (0, _mocha.it)('works for negative numbers', function () {\n      var result = (0, _emberFrostListHelpersFloor.floor)([-42.8]);\n      (0, _chai.expect)(result).to.equal(-43);\n    });\n  });\n});","define('dummy/tests/unit/helpers/is-lead-selection', ['exports', 'chai', 'ember-frost-list/helpers/is-lead-selection', 'mocha'], function (exports, _chai, _emberFrostListHelpersIsLeadSelection, _mocha) {\n\n  _mocha.describe.skip('Unit / Helper / is-lead-selection', function () {\n    // Replace this with your real tests.\n    (0, _mocha.it)('works', function () {\n      var result = (0, _emberFrostListHelpersIsLeadSelection.floor)([42.8]);\n      (0, _chai.expect)(result).to.equal(42);\n    });\n  });\n});\n/* jshint expr:true */","define(\"dummy/tests/unit/mixins/frost-list-core-mixin-test\", [\"exports\"], function (exports) {});\n// import {expect} from 'chai'\n// import {beforeEach, describe, it} from 'mocha'\n// import Ember from 'ember'\n// const {Object as EmberObject} = Ember\n// import FrostListCoreMixin from 'ember-frost-list/mixins/frost-list-core-mixin'\n\n// describe.skip('Unit / Mixin / frost-list-core-mixin', function () {\n//   const testItems = [\n//     {\n//       id: '1'\n//     }\n//   ]\n//   let subject\n\n//   beforeEach(function () {\n//     let testObject = EmberObject.extend(FrostListCoreMixin)\n//     subject = testObject.create({\n//       listConfig: {\n//         items: 'model'\n//       }\n//     })\n\n//     subject.set('model', testItems)\n//   })\n\n//   it('successfully mixed', function () {\n//     expect(\n//       subject\n//     ).to.be.ok\n//   })\n\n//   it('sets up \"_listItems\" as a computed alias to listConfig.items', function () {\n//     expect(\n//       subject.get('_listItems')\n//     ).to.eql(testItems)\n//   })\n\n//   describe('listItems computed property is correctly set', function () {\n//     it('sets listItems[0].id to 1', function () {\n//       expect(\n//         subject.get('listItems')[0].id\n//       ).to.eql('1')\n//     })\n\n//     it('sets listItems[0].record to the item object', function () {\n//       expect(\n//         subject.get('listItems')[0].record\n//       ).to.eql({\n//         id: '1'\n//       })\n//     })\n//   })\n\n//   describe('statefulListItems computed property', function () {\n//     describe('\"isSelected\" and \"isExpanded\" have a default value of false', function () {\n//       beforeEach(function () {\n//         subject.setProperties(\n//           {\n//             'selectedItems': EmberObject.create(),\n//             'expandedItems': EmberObject.create()\n//           }\n//         )\n//       })\n\n//       it('sets default to false for \"isExpanded\"', function () {\n//         expect(\n//           subject.get('statefulListItems')[0].isExpanded\n//         ).to.eql(false)\n//       })\n\n//       it('sets default to false for \"isSelected\"', function () {\n//         expect(\n//           subject.get('statefulListItems')[0].isSelected\n//         ).to.eql(false)\n//       })\n//     })\n\n//     it('sets \"isSelected\" correctly when it already has a value', function () {\n//       subject.setProperties(\n//         {\n//           'selectedItems': EmberObject.create({ 1: true }),\n//           'expandedItems': EmberObject.create()\n//         }\n//       )\n\n//       expect(\n//         subject.get('statefulListItems')[0].isSelected\n//       ).to.eql(true)\n//     })\n\n//     it('sets \"isExpanded\" correctly when it already has a value', function () {\n//       subject.setProperties(\n//         {\n//           'selectedItems': EmberObject.create(),\n//           'expandedItems': EmberObject.create({ 1: true })\n//         }\n//       )\n\n//       expect(\n//         subject.get('statefulListItems')[0].isExpanded\n//       ).to.eql(true)\n//     })\n//   })\n// })","define(\"dummy/tests/unit/mixins/frost-list-expansion-mixin-test\", [\"exports\"], function (exports) {});\n// import {expect} from 'chai'\n// import Ember from 'ember'\n// const {Controller, Object as EmberObject} = Ember\n// import {afterEach, beforeEach, describe, it} from 'mocha'\n// import FrostListCoreMixin from 'ember-frost-list/mixins/frost-list-core-mixin'\n// import FrostListExpansionMixin from 'ember-frost-list/mixins/frost-list-expansion-mixin'\n// import sinon from 'sinon'\n\n// describe.skip('Unit / Mixin / frost-list-expansion-mixin', function () {\n//   let sandbox\n\n//   const testItems = [\n//     {\n//       id: '1'\n//     }\n//   ]\n//   let subject\n\n//   beforeEach(function () {\n//     sandbox = sinon.sandbox.create()\n//     let testObject = Controller.extend(FrostListExpansionMixin)\n//     subject = testObject.create({\n//       listConfig: {\n//         items: 'model'\n//       }\n//     })\n\n//     subject.set('model', testItems)\n//   })\n\n//   afterEach(function () {\n//     sandbox.restore()\n//   })\n\n//   it('successfully mixed', function () {\n//     expect(\n//       subject\n//     ).to.be.ok\n//   })\n\n//   it('creates \"expandedItems\" as an empty Ember.Object', function () {\n//     expect(\n//       subject.get('expandedItems')\n//     ).to.eql(EmberObject.create())\n//   })\n\n//   it('has the expect Mixins', function () {\n//     expect(\n//       FrostListCoreMixin.detect(subject)\n//     ).to.eql(true)\n//   })\n\n//   describe('collapseItems()', function () {\n//     it('removes the expended id', function () {\n//       subject.set('expandedItems', EmberObject.create({ 1: true }))\n//       subject.send('collapseItems')\n\n//       expect(\n//         subject.get('expandedItems.1')\n//       ).to.eql(undefined)\n//     })\n\n//     it('notifyPropertyChange() is called with correct parameter', function () {\n//       const collapseItemsSpy = sandbox.spy(subject, 'notifyPropertyChange')\n\n//       subject.send('collapseItems')\n\n//       expect(\n//         collapseItemsSpy.calledWith('expandedItems')\n//       ).to.eql(true)\n//     })\n//   })\n\n//   describe('expandItems()', function () {\n//     it('expandItems function sets id to true', function () {\n//       subject.set('expandedItems', EmberObject.create())\n//       subject.send('expandItems')\n\n//       expect(\n//         subject.get('expandedItems.1')\n//       ).to.eql(true)\n//     })\n\n//     it('notifyPropertyChange() is called with correct parameter', function () {\n//       const expandItemsSpy = sandbox.spy(subject, 'notifyPropertyChange')\n\n//       subject.send('expandItems')\n\n//       expect(\n//         expandItemsSpy.calledWith('expandedItems')\n//       ).to.eql(true)\n//     })\n//   })\n// })","define(\"dummy/tests/unit/mixins/frost-list-mixin-test\", [\"exports\"], function (exports) {});\n// import {expect} from 'chai'\n// import {beforeEach, describe, it} from 'mocha'\n// import Ember from 'ember'\n// const {A, Controller, on} = Ember\n// import FrostListMixin from 'ember-frost-list/mixins/frost-list-mixin'\n// import FrostListSelectionMixin from 'ember-frost-list/mixins/frost-list-selection-mixin'\n// import FrostListExpansionMixin from 'ember-frost-list/mixins/frost-list-expansion-mixin'\n// import FrostListSortingMixin from 'ember-frost-list/mixins/frost-list-sorting-mixin'\n\n// describe.skip('Unit / Mixin / frost-list-mixin', function () {\n//   const testItems = [\n//     {\n//       id: '1'\n//     }\n//   ]\n//   let subject\n\n//   beforeEach(function () {\n//     let testObject = Controller.extend(FrostListMixin)\n//     subject = testObject.create({\n//       listConfig: {\n//         items: 'model'\n//       }\n//     })\n\n//     subject.set('model', testItems)\n//   })\n\n//   it('successfully mixed', function () {\n//     expect(\n//       subject\n//     ).to.be.ok\n//   })\n\n//   describe('expected Mixins', function () {\n//     it('has FrostListSelectionMixin Mixin', function () {\n//       expect(\n//         FrostListSelectionMixin.detect(subject)\n//       ).to.eql(true)\n//     })\n\n//     it('has FrostListExpansionMixin Mixin', function () {\n//       expect(\n//         FrostListExpansionMixin.detect(subject)\n//       ).to.eql(true)\n//     })\n\n//     it('has FrostListSortingMixin Mixin', function () {\n//       expect(\n//         FrostListSortingMixin.detect(subject)\n//       ).to.eql(true)\n//     })\n//   })\n\n//   it('sets dependent keys correctly', function () {\n//     const listMixinConfigDependentKeys = [\n//       'activeSorting',\n//       'sortableProperties',\n//       'statefulListItems.[]'\n//     ]\n\n//     expect(\n//       subject.listMixinConfig._dependentKeys\n//     ).to.eql(listMixinConfigDependentKeys)\n//   })\n\n//   describe('\"listMixinConfig\" computed property', function () {\n//     let listMixinConfig\n\n//     beforeEach(function () {\n//       let list = A()\n//       list.addObject({\n//         id: '1',\n//         isExpanded: false\n//       })\n\n//       const mixinTestObject = Controller.extend(FrostListMixin)\n//       const mixin = mixinTestObject.create({\n//         listConfig: {\n//           items: 'model',\n//           sorting: {\n//             active: [],\n//             properties: []\n//           }\n//         },\n//         initListMixin: on('init', function () {\n//           this.set('_selectItem', '_selectItem')\n//           this.set('_collapseItems', '_collapseItems')\n//           this.set('_expandItems', '_expandItems')\n//           this.set('_collapseItem', '_collapseItem')\n//           this.set('_expandItem', '_expandItem')\n//           this.set('_sortItems', '_sortItems')\n//           this.set('_loadNext', '_loadNext')\n//           this.set('_loadPrevious', '_loadPrevious')\n//         })\n//       })\n\n//       mixin.setProperties(\n//         {\n//           'model': list,\n//           'listConfig.component': 'my-list-item',\n//           'activeSorting': [],\n//           'properties': []\n//         }\n//       )\n\n//       listMixinConfig = mixin.get('listMixinConfig')\n//     })\n\n//     it('has \"items\" property', function () {\n//       expect(\n//         listMixinConfig\n//       ).to.have.property('items')\n//     })\n\n//     it('has component\" property', function () {\n//       expect(\n//         listMixinConfig\n//       ).to.have.property('component', 'my-list-item')\n//     })\n\n//     it('has \"expansion\" property with correct structure', function () {\n//       expect(\n//         listMixinConfig\n//       ).to.have.property('expansion')\n//         .that.deep.equals({\n//           onCollapseAll: '_collapseItems',\n//           onExpandAll: '_expandItems'\n//         })\n//     })\n\n//     it('has \"selection\" propery with correct structure', function () {\n//       expect(\n//         listMixinConfig\n//         ).to.have.property('selection')\n//           .that.deep.equals({\n//             onSelect: '_selectItem'\n//           })\n//     })\n\n//     it('has \"sorting\" propery with correct structure', function () {\n//       expect(\n//         listMixinConfig,\n//         '\"sorting\" propery exists and has correct structure'\n//         ).to.have.property('sorting')\n//           .that.deep.equals({\n//             activeSorting: [],\n//             properties: [],\n//             onSort: '_sortItems'\n//           })\n//     })\n\n//     it('has \"infiniteScroll\" propery with correct structure', function () {\n//       expect(\n//         listMixinConfig,\n//         '\"infiniteScroll\" propery exists and has correct structure'\n//         ).to.have.property('infiniteScroll')\n//           .that.deep.equals({\n//             loadNext: '_loadNext',\n//             loadPrevious: '_loadPrevious'\n//           })\n//     })\n//   })\n// })","define(\"dummy/tests/unit/mixins/frost-list-selection-mixin-test\", [\"exports\"], function (exports) {});\n// import {expect} from 'chai'\n// import Ember from 'ember'\n// const {Controller, EmberObject as EmberObject} = Ember\n// import FrostListCoreMixin from 'ember-frost-list/mixins/frost-list-core-mixin'\n// import FrostListSelectionMixin from 'ember-frost-list/mixins/frost-list-selection-mixin'\n// import * as utils from 'ember-frost-list/utils/utils'\n// import {afterEach, beforeEach, describe, it} from 'mocha'\n// import sinon from 'sinon'\n\n// describe.skip('Unit / Mixin / frost-list-selection-mixin', function () {\n//   let sandbox\n\n//   const testItems = [\n//     {\n//       id: '1',\n//       isSelected: false\n//     }\n//   ]\n//   let subject\n\n//   beforeEach(function () {\n//     sandbox = sinon.sandbox.create()\n//     let testObject = Controller.extend(FrostListSelectionMixin)\n//     subject = testObject.create({\n//       listConfig: {\n//         items: 'model'\n//       }\n//     })\n\n//     subject.set('model', testItems)\n//   })\n\n//   afterEach(function () {\n//     sandbox.restore()\n//   })\n\n//   it('successfully mixed', function () {\n//     expect(\n//       subject\n//     ).to.be.ok\n//   })\n\n//   it('sets up \"selectedItems\" with an empty object', function () {\n//     expect(\n//       subject.get('selectedItems')\n//     ).to.eql(EmberObject.create())\n//   })\n\n//   it('has the expect Mixins', function () {\n//     expect(\n//       FrostListCoreMixin.detect(subject)\n//     ).to.eql(true)\n//   })\n\n//   describe('\"selectedItem()\" action', function () {\n//     it('udpates selectedItems', function () {\n//       sandbox.stub(utils, 'updateSelectedItemsHash').returns({ 1: true })\n\n//       subject.send('selectItem', {})\n\n//       expect(\n//         subject.get('selectedItems')\n//       ).to.eql({ 1: true })\n//     })\n\n//     it('calls \"updateSelectedItemsHash()\" with correct parameters', function () {\n//       const updateSelectedItemsHashSpy =\n//         sandbox.stub(utils, 'updateSelectedItemsHash').returns({ 1: true })\n\n//       subject.set('selectedItems', { 1: true })\n\n//       subject.send('selectItem', {})\n\n//       expect(\n//         updateSelectedItemsHashSpy.calledWith({ 1: true }, {})\n//       ).to.eql(true)\n//     })\n\n//     it('calls \"notifyPropertyChange\" with correct parameter', function () {\n//       const notifyPropertyChangeSpy = sandbox.spy(subject, 'notifyPropertyChange')\n//       sandbox.stub(utils, 'updateSelectedItemsHash').returns({ 1: true })\n\n//       subject.send('selectItem', {})\n\n//       expect(\n//         notifyPropertyChangeSpy.calledWith('selectedItems')\n//       ).to.eql(true)\n//     })\n//   })\n// })","define(\"dummy/tests/unit/mixins/frost-list-sorting-mixin-test\", [\"exports\"], function (exports) {});\n// import {expect} from 'chai'\n// import Ember from 'ember'\n// const {A, Controller} = Ember\n// import {afterEach, beforeEach, describe, it} from 'mocha'\n// import sinon from 'sinon'\n// import FrostListCoreMixin from 'ember-frost-list/mixins/frost-list-core-mixin'\n// import FrostListSortingMixin from 'ember-frost-list/mixins/frost-list-sorting-mixin'\n\n// describe.skip('Unit / Mixin / frost-list-sorting-mixin', function () {\n//   let sandbox\n\n//   const testItems = [\n//     {\n//       id: '1',\n//       isSelected: false\n//     }\n//   ]\n//   let subject\n\n//   beforeEach(function () {\n//     sandbox = sinon.sandbox.create()\n//     let testObject = Controller.extend(FrostListSortingMixin)\n//     subject = testObject.create({\n//       listConfig: {\n//         items: 'model'\n//       }\n//     })\n\n//     subject.set('model', testItems)\n//   })\n\n//   afterEach(function () {\n//     sandbox.restore()\n//   })\n\n//   it('successfully mixed', function () {\n//     expect(\n//       subject\n//     ).to.be.ok\n//   })\n\n//   it('has the expect Mixins', function () {\n//     expect(\n//       FrostListCoreMixin.detect(subject)\n//     ).to.eql(true)\n//   })\n\n//   describe('sortItems() action', function () {\n//     let mixin, sortProperties\n\n//     beforeEach(function () {\n//       const testItems = A([\n//         {\n//           id: '1',\n//           isSelected: false\n//         },\n//         {\n//           id: '2',\n//           isSelected: false\n//         }\n//       ])\n\n//       sortProperties = A([\n//         {\n//           direction: ':desc',\n//           value: 'id'\n//         }\n//       ])\n\n//       const mixinTestObject = Controller.extend(FrostListSortingMixin)\n//       mixin = mixinTestObject.create({\n//         listConfig: {\n//           items: 'model',\n//           sorting: {}\n//         }\n//       })\n//       mixin.set('model', testItems)\n//     })\n\n//     it('calls default sort', function () {\n//       const resultItems = [\n//         {\n//           id: '2',\n//           isSelected: false\n//         },\n//         {\n//           id: '1',\n//           isSelected: false\n//         }\n//       ]\n//       mixin.send('sortItems', sortProperties)\n\n//       expect(\n//         mixin.get('model'),\n//         'items sorted by \"id\" in desc order'\n//       ).to.eql(resultItems)\n//     })\n\n//     it('calls the user defined sort', function () {\n//       mixin.set('listConfig.sorting.client', sandbox.spy())\n//       mixin.send('sortItems', sortProperties)\n\n//       expect(\n//         mixin.get('listConfig.sorting.client').called\n//       ).to.eql(true)\n//     })\n\n//     it('throws assertion error when custom sort method is not a function', function () {\n//       mixin.set('listConfig.sorting.client', 'test')\n\n//       expect(\n//         () => {\n//           mixin.send('sortItems', sortProperties)\n//         }\n//       ).to.throw(/custom sort method to be function/)\n//     })\n//   })\n// })","define('dummy/tests/unit/utils/selection-test', ['exports', 'chai', 'ember-frost-list/utils/selection', 'mocha'], function (exports, _chai, _emberFrostListUtilsSelection, _mocha) {\n\n  (0, _mocha.describe)('Unit / Utility / selection', function () {\n    // Replace this with your real tests.\n    _mocha.it.skip('works', function () {\n      var result = (0, _emberFrostListUtilsSelection['default'])();\n      (0, _chai.expect)(result).not.to.equal(undefined);\n    });\n  });\n});","define(\"dummy/tests/unit/utils/utils-test\", [\"exports\"], function (exports) {});\n// import Ember from 'ember'\n// import {expect} from 'chai'\n// const {A, Object} = Ember\n// import {beforeEach, describe, it} from 'mocha'\n// import {updateSelectedItemsHash, normalizeSort, defaultSort} from 'ember-frost-list/utils/utils'\n\n// describe('Unit / Utils / utils', function () {\n//   describe('updateSelectedItemsHash function', function () {\n//     describe('single item or multiple items selection', function () {\n//       describe('single item selection', function () {\n//         let attr\n\n//         beforeEach(function () {\n//           attr = Object.create({\n//             selectDesc: {\n//               isSelected: true,\n//               isShiftSelect: false\n//             },\n//             records: [\n//               {\n//                 id: '1'\n//               }\n//             ]\n//           })\n//         })\n\n//         it('updates selection', function () {\n//           expect(\n//             updateSelectedItemsHash(Object.create(), attr)\n//           ).to.eql(Object.create({ 1: true }))\n//         })\n\n//         it('clicks on the item but not the check box', function () {\n//           const selections = Object.create({\n//             2: true,\n//             3: true\n//           })\n\n//           expect(\n//             updateSelectedItemsHash(selections, attr),\n//             'previous selected record/records are deleted'\n//           ).to.eql(Object.create({ 1: true }))\n//         })\n//       })\n\n//       describe('shiftKey selection', function () {\n//         let attr\n\n//         beforeEach(function () {\n//           attr = Object.create({\n//             selectDesc: {\n//               isSelected: true,\n//               isShiftSelect: true\n//             },\n//             records: [\n//               {\n//                 id: '1'\n//               }\n//             ]\n//           })\n//         })\n\n//         it('updates selections', function () {\n//           expect(\n//             updateSelectedItemsHash(Object.create(), attr)\n//           ).to.eql(Object.create({ 1: true }))\n//         })\n//       })\n\n//       describe('control or command key selection', function () {\n//         let attr\n\n//         beforeEach(function () {\n//           attr = Object.create({\n//             selectDesc: {\n//               isSelected: true,\n//               isShiftSelect: false,\n//               isCtrlSelect: true\n//             },\n//             records: [\n//               {\n//                 id: '2'\n//               }\n//             ]\n//           })\n//         })\n\n//         it('updates selections and does NOT delete prevous record/records', function () {\n//           expect(\n//             updateSelectedItemsHash(Object.create({ 1: true }), attr)\n//           ).to.eql(Object.create(\n//             {\n//               1: true,\n//               2: true\n//             })\n//           )\n//         })\n//       })\n//     })\n\n//     describe('unselect item', function () {\n//       let attr\n\n//       beforeEach(function () {\n//         attr = Object.create({\n//           selectDesc: {\n//             isSelected: false\n//           },\n//           records: [\n//             {\n//               id: '1'\n//             }\n//           ]\n//         })\n//       })\n\n//       it('deletes id from selections', function () {\n//         expect(\n//           updateSelectedItemsHash(Object.create({ 1: true }), attr)\n//         ).to.eql(Object.create())\n//       })\n//     })\n//   })\n\n//   describe('normalizeSort function', function () {\n//     describe('sort array is NOT present', function () {\n//       it('returns empty array', function () {\n//         expect(\n//           normalizeSort()\n//         ).to.eql([])\n//       })\n//     })\n\n//     describe('sort array exists', function () {\n//       it('returns output prefixed with \"-\"', function () {\n//         const sort = A([\n//           {\n//             direction: ':desc',\n//             value: 'label'\n//           }\n//         ])\n\n//         expect(\n//           normalizeSort(sort)\n//         ).to.eql(A(['-label']))\n//       })\n\n//       it('returns output prefixed with no \"-\"', function () {\n//         const sort = A([\n//           {\n//             direction: ':asc',\n//             value: 'label'\n//           }\n//         ])\n\n//         expect(\n//           normalizeSort(sort)\n//         ).to.eql(A(['label']))\n//       })\n//     })\n//   })\n\n//   describe('defaultSort function', function () {\n//     describe('sortProperties is NOT present', function () {\n//       it('returns and does nothing', function () {\n//         expect(\n//           defaultSort(Object.create())\n//         ).to.eql(undefined)\n//       })\n//     })\n\n//     describe('sortProperties is present', function () {\n//       it('sorts items in ascending order', function () {\n//         const sortProperties = A(['label'])\n\n//         const items = A([\n//           {\n//             label: '2'\n//           },\n//           {\n//             label: '1'\n//           }\n//         ])\n\n//         const sortedItems = A([\n//           {\n//             label: '1'\n//           },\n//           {\n//             label: '2'\n//           }\n//         ])\n\n//         expect(\n//           defaultSort(items, sortProperties)\n//         ).to.eql(sortedItems)\n//       })\n\n//       it('sorts items in descending order', function () {\n//         const sortProperties = A(['-label'])\n\n//         const items = A([\n//           {\n//             label: '1'\n//           },\n//           {\n//             label: '2'\n//           }\n//         ])\n\n//         const sortedItems = A([\n//           {\n//             label: '2'\n//           },\n//           {\n//             label: '1'\n//           }\n//         ])\n\n//         expect(\n//           defaultSort(items, sortProperties)\n//         ).to.eql(sortedItems)\n//       })\n//     })\n//   })\n// })","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzxxXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlvnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrjOA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}